
Arduino_Car_STM32_SingleTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f14  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  080050f4  080050f4  000060f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d0  080052d0  00007080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052d0  080052d0  000062d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052d8  080052d8  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d8  080052d8  000062d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052dc  080052dc  000062dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080052e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000080  08005360  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  08005360  00007654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e26e  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002373  00000000  00000000  0001531e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00017698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089c  00000000  00000000  000181e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d23f  00000000  00000000  00018a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0c7  00000000  00000000  00035cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b80e9  00000000  00000000  00043d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbe73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c4  00000000  00000000  000fbeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000ff07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	080050dc 	.word	0x080050dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	080050dc 	.word	0x080050dc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fdd3 	bl	80011aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f81c 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f8e4 	bl	80007d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800060c:	f000 f8b0 	bl	8000770 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f862 	bl	80006d8 <MX_USART2_UART_Init>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, RX_BUFFER_SIZE);
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); // Disable half-transfer interrupt
  */

  // Init the home menu
  uart_dma_init(&huart2);
 8000614:	4809      	ldr	r0, [pc, #36]	@ (800063c <main+0x40>)
 8000616:	f000 fbd3 	bl	8000dc0 <uart_dma_init>
  Menu_Init();  // Shows initial VT100 screen
 800061a:	f000 f947 	bl	80008ac <Menu_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  vt100_process_rx_chunk();
 800061e:	f000 fd2d 	bl	800107c <vt100_process_rx_chunk>
	  while (vt100_char_available()) {
 8000622:	e005      	b.n	8000630 <main+0x34>
		  Menu_HandleInput(vt100_read_char());
 8000624:	f000 fd6e 	bl	8001104 <vt100_read_char>
 8000628:	4603      	mov	r3, r0
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f9d2 	bl	80009d4 <Menu_HandleInput>
	  while (vt100_char_available()) {
 8000630:	f000 fd54 	bl	80010dc <vt100_char_available>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f4      	bne.n	8000624 <main+0x28>
	  vt100_process_rx_chunk();
 800063a:	e7f0      	b.n	800061e <main+0x22>
 800063c:	2000009c 	.word	0x2000009c

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2238      	movs	r2, #56	@ 0x38
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 f8c6 	bl	80047e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000662:	2000      	movs	r0, #0
 8000664:	f001 fbee 	bl	8001e44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2340      	movs	r3, #64	@ 0x40
 8000674:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800067e:	2304      	movs	r3, #4
 8000680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000682:	2355      	movs	r3, #85	@ 0x55
 8000684:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fc88 	bl	8001fac <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006a2:	f000 f8fd 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2303      	movs	r3, #3
 80006ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2104      	movs	r1, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 ff86 	bl	80025d0 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ca:	f000 f8e9 	bl	80008a0 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 80006de:	4a23      	ldr	r2, [pc, #140]	@ (800076c <MX_USART2_UART_Init+0x94>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e2:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070e:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000720:	4811      	ldr	r0, [pc, #68]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 8000722:	f002 fb61 	bl	8002de8 <HAL_UART_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800072c:	f000 f8b8 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	480d      	ldr	r0, [pc, #52]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 8000734:	f003 ff54 	bl	80045e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800073e:	f000 f8af 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4808      	ldr	r0, [pc, #32]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 8000746:	f003 ff89 	bl	800465c <HAL_UARTEx_SetRxFifoThreshold>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000750:	f000 f8a6 	bl	80008a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_USART2_UART_Init+0x90>)
 8000756:	f003 ff0a 	bl	800456e <HAL_UARTEx_DisableFifoMode>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000760:	f000 f89e 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000009c 	.word	0x2000009c
 800076c:	40004400 	.word	0x40004400

08000770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_DMA_Init+0x60>)
 8000778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800077a:	4a15      	ldr	r2, [pc, #84]	@ (80007d0 <MX_DMA_Init+0x60>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6493      	str	r3, [r2, #72]	@ 0x48
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_DMA_Init+0x60>)
 8000784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_DMA_Init+0x60>)
 8000790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000792:	4a0f      	ldr	r2, [pc, #60]	@ (80007d0 <MX_DMA_Init+0x60>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6493      	str	r3, [r2, #72]	@ 0x48
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <MX_DMA_Init+0x60>)
 800079c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	200b      	movs	r0, #11
 80007ac:	f000 fe49 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007b0:	200b      	movs	r0, #11
 80007b2:	f000 fe60 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	200c      	movs	r0, #12
 80007bc:	f000 fe41 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007c0:	200c      	movs	r0, #12
 80007c2:	f000 fe58 	bl	8001476 <HAL_NVIC_EnableIRQ>

}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <MX_GPIO_Init+0xc4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000898 <MX_GPIO_Init+0xc4>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000802:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a24      	ldr	r2, [pc, #144]	@ (8000898 <MX_GPIO_Init+0xc4>)
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <MX_GPIO_Init+0xc4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0320 	and.w	r3, r3, #32
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <MX_GPIO_Init+0xc4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	4a1e      	ldr	r2, [pc, #120]	@ (8000898 <MX_GPIO_Init+0xc4>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000826:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <MX_GPIO_Init+0xc4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <MX_GPIO_Init+0xc4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	4a18      	ldr	r2, [pc, #96]	@ (8000898 <MX_GPIO_Init+0xc4>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_GPIO_Init+0xc4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000852:	f001 fadf 	bl	8001e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000856:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	480b      	ldr	r0, [pc, #44]	@ (800089c <MX_GPIO_Init+0xc8>)
 800086e:	f001 f94f 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000872:	2320      	movs	r3, #32
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088c:	f001 f940 	bl	8001b10 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	@ 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	48000800 	.word	0x48000800

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <Error_Handler+0x8>

080008ac <Menu_Init>:

#define NUM_INTRO_LINES (sizeof(intro_lines) / sizeof(intro_lines[0]))
#define NUM_INSTRUCTION_LINES 1
#define MENU_TOP_OFFSET (NUM_INTRO_LINES + NUM_INSTRUCTION_LINES + MENU_LINE_SPACER)

void Menu_Init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
    vt100_clear_screen();
 80008b0:	f000 fba0 	bl	8000ff4 <vt100_clear_screen>
    vt100_goto_line(1);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f000 fb8f 	bl	8000fd8 <vt100_goto_line>
    Menu_Display();
 80008ba:	f000 f803 	bl	80008c4 <Menu_Display>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <Menu_Display>:

void Menu_Display(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
    vt100_cursor_hide();
 80008ca:	f000 fbab 	bl	8001024 <vt100_cursor_hide>
    vt100_goto_line(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 fb82 	bl	8000fd8 <vt100_goto_line>

    for (size_t i = 0; i < NUM_INTRO_LINES; i++) {
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	e009      	b.n	80008ee <Menu_Display+0x2a>
        vt100_write_SRAM_line(intro_lines[i]);
 80008da:	4a17      	ldr	r2, [pc, #92]	@ (8000938 <Menu_Display+0x74>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fb4a 	bl	8000f7c <vt100_write_SRAM_line>
    for (size_t i = 0; i < NUM_INTRO_LINES; i++) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3301      	adds	r3, #1
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	d9f2      	bls.n	80008da <Menu_Display+0x16>
    }

    vt100_write_SRAM_line("");
 80008f4:	4811      	ldr	r0, [pc, #68]	@ (800093c <Menu_Display+0x78>)
 80008f6:	f000 fb41 	bl	8000f7c <vt100_write_SRAM_line>
    vt100_write_SRAM_line("\033[1mUse ↑ ↓ to navigate. Press Enter to select.\033[0m");
 80008fa:	4811      	ldr	r0, [pc, #68]	@ (8000940 <Menu_Display+0x7c>)
 80008fc:	f000 fb3e 	bl	8000f7c <vt100_write_SRAM_line>

    for (int i = 0; i < MENU_TOTAL_LINES; i++) {
 8000900:	2300      	movs	r3, #0
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	e00e      	b.n	8000924 <Menu_Display+0x60>
        Menu_UpdateLine(i, i == selected_index);
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <Menu_Display+0x80>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	bf0c      	ite	eq
 8000910:	2301      	moveq	r3, #1
 8000912:	2300      	movne	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	4619      	mov	r1, r3
 8000918:	6838      	ldr	r0, [r7, #0]
 800091a:	f000 f815 	bl	8000948 <Menu_UpdateLine>
    for (int i = 0; i < MENU_TOTAL_LINES; i++) {
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	2b04      	cmp	r3, #4
 8000928:	dded      	ble.n	8000906 <Menu_Display+0x42>
    }

    vt100_cursor_show();
 800092a:	f000 fb85 	bl	8001038 <vt100_cursor_show>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000014 	.word	0x20000014
 800093c:	080051c0 	.word	0x080051c0
 8000940:	080051c4 	.word	0x080051c4
 8000944:	200001f4 	.word	0x200001f4

08000948 <Menu_UpdateLine>:

void Menu_UpdateLine(int index, int is_selected) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
    vt100_goto_line(MENU_TOP_OFFSET + index);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	3307      	adds	r3, #7
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fb3c 	bl	8000fd8 <vt100_goto_line>
    vt100_clear_line();
 8000960:	f000 fb56 	bl	8001010 <vt100_clear_line>
    vt100_write_SRAM_text(is_selected ? MENU_MARKER_SELECTED : MENU_MARKER_NORMAL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <Menu_UpdateLine+0x26>
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <Menu_UpdateLine+0x44>)
 800096c:	e000      	b.n	8000970 <Menu_UpdateLine+0x28>
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <Menu_UpdateLine+0x48>)
 8000970:	4618      	mov	r0, r3
 8000972:	f000 faf8 	bl	8000f66 <vt100_write_SRAM_text>
    vt100_write_SRAM_line(menu_lines[index]);
 8000976:	4a07      	ldr	r2, [pc, #28]	@ (8000994 <Menu_UpdateLine+0x4c>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fafc 	bl	8000f7c <vt100_write_SRAM_line>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	080051fc 	.word	0x080051fc
 8000990:	08005200 	.word	0x08005200
 8000994:	20000000 	.word	0x20000000

08000998 <Menu_ExecuteSelected>:

static void Menu_ExecuteSelected(int index) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    vt100_write_SRAM_line("");
 80009a0:	4809      	ldr	r0, [pc, #36]	@ (80009c8 <Menu_ExecuteSelected+0x30>)
 80009a2:	f000 faeb 	bl	8000f7c <vt100_write_SRAM_line>
    vt100_set_color("\033[32m");
 80009a6:	4809      	ldr	r0, [pc, #36]	@ (80009cc <Menu_ExecuteSelected+0x34>)
 80009a8:	f000 fb50 	bl	800104c <vt100_set_color>
    vt100_write_SRAM_line(menu_lines[index]);
 80009ac:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <Menu_ExecuteSelected+0x38>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fae1 	bl	8000f7c <vt100_write_SRAM_line>
    vt100_reset_attributes();
 80009ba:	f000 fb55 	bl	8001068 <vt100_reset_attributes>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	080051c0 	.word	0x080051c0
 80009cc:	08005204 	.word	0x08005204
 80009d0:	20000000 	.word	0x20000000

080009d4 <Menu_HandleInput>:

void Menu_HandleInput(uint8_t input) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
    int old_index = selected_index;
 80009de:	4b33      	ldr	r3, [pc, #204]	@ (8000aac <Menu_HandleInput+0xd8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	60fb      	str	r3, [r7, #12]

    switch (esc_state) {
 80009e4:	4b32      	ldr	r3, [pc, #200]	@ (8000ab0 <Menu_HandleInput+0xdc>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d021      	beq.n	8000a30 <Menu_HandleInput+0x5c>
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	dc53      	bgt.n	8000a98 <Menu_HandleInput+0xc4>
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d002      	beq.n	80009fa <Menu_HandleInput+0x26>
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d010      	beq.n	8000a1a <Menu_HandleInput+0x46>
 80009f8:	e04e      	b.n	8000a98 <Menu_HandleInput+0xc4>
        case ESC_STATE_NONE:
            if (input == MENU_KEY_ESC) esc_state = ESC_STATE_ESC;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b1b      	cmp	r3, #27
 80009fe:	d103      	bne.n	8000a08 <Menu_HandleInput+0x34>
 8000a00:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <Menu_HandleInput+0xdc>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
            else if (input == MENU_KEY_ENTER) Menu_ExecuteSelected(selected_index);
            break;
 8000a06:	e04b      	b.n	8000aa0 <Menu_HandleInput+0xcc>
            else if (input == MENU_KEY_ENTER) Menu_ExecuteSelected(selected_index);
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2b0d      	cmp	r3, #13
 8000a0c:	d148      	bne.n	8000aa0 <Menu_HandleInput+0xcc>
 8000a0e:	4b27      	ldr	r3, [pc, #156]	@ (8000aac <Menu_HandleInput+0xd8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ffc0 	bl	8000998 <Menu_ExecuteSelected>
            break;
 8000a18:	e042      	b.n	8000aa0 <Menu_HandleInput+0xcc>
        case ESC_STATE_ESC:
            if (input == MENU_KEY_BRACKET) esc_state = ESC_STATE_BRACKET;
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b5b      	cmp	r3, #91	@ 0x5b
 8000a1e:	d103      	bne.n	8000a28 <Menu_HandleInput+0x54>
 8000a20:	4b23      	ldr	r3, [pc, #140]	@ (8000ab0 <Menu_HandleInput+0xdc>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	701a      	strb	r2, [r3, #0]
            else esc_state = ESC_STATE_NONE;
            break;
 8000a26:	e03c      	b.n	8000aa2 <Menu_HandleInput+0xce>
            else esc_state = ESC_STATE_NONE;
 8000a28:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <Menu_HandleInput+0xdc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
            break;
 8000a2e:	e038      	b.n	8000aa2 <Menu_HandleInput+0xce>
        case ESC_STATE_BRACKET:
            if (input == MENU_KEY_ARROW_UP) selected_index = (selected_index == 0) ? MENU_TOTAL_LINES - 1 : selected_index - 1;
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b41      	cmp	r3, #65	@ 0x41
 8000a34:	d10b      	bne.n	8000a4e <Menu_HandleInput+0x7a>
 8000a36:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <Menu_HandleInput+0xd8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <Menu_HandleInput+0x72>
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <Menu_HandleInput+0xd8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	e000      	b.n	8000a48 <Menu_HandleInput+0x74>
 8000a46:	2304      	movs	r3, #4
 8000a48:	4a18      	ldr	r2, [pc, #96]	@ (8000aac <Menu_HandleInput+0xd8>)
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	e011      	b.n	8000a72 <Menu_HandleInput+0x9e>
            else if (input == MENU_KEY_ARROW_DOWN) selected_index = (selected_index + 1) % MENU_TOTAL_LINES;
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b42      	cmp	r3, #66	@ 0x42
 8000a52:	d10e      	bne.n	8000a72 <Menu_HandleInput+0x9e>
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <Menu_HandleInput+0xd8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1c59      	adds	r1, r3, #1
 8000a5a:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <Menu_HandleInput+0xe0>)
 8000a5c:	fb83 2301 	smull	r2, r3, r3, r1
 8000a60:	105a      	asrs	r2, r3, #1
 8000a62:	17cb      	asrs	r3, r1, #31
 8000a64:	1ad2      	subs	r2, r2, r3
 8000a66:	4613      	mov	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	1aca      	subs	r2, r1, r3
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <Menu_HandleInput+0xd8>)
 8000a70:	601a      	str	r2, [r3, #0]

            if (old_index != selected_index) {
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <Menu_HandleInput+0xd8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d009      	beq.n	8000a90 <Menu_HandleInput+0xbc>
                Menu_UpdateLine(old_index, 0);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff ff62 	bl	8000948 <Menu_UpdateLine>
                Menu_UpdateLine(selected_index, 1);
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <Menu_HandleInput+0xd8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff5c 	bl	8000948 <Menu_UpdateLine>
            }
            esc_state = ESC_STATE_NONE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <Menu_HandleInput+0xdc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
            break;
 8000a96:	e004      	b.n	8000aa2 <Menu_HandleInput+0xce>
        default:
            esc_state = ESC_STATE_NONE;
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <Menu_HandleInput+0xdc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
            break;
 8000a9e:	e000      	b.n	8000aa2 <Menu_HandleInput+0xce>
            break;
 8000aa0:	bf00      	nop
    }
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001f4 	.word	0x200001f4
 8000ab0:	200001f0 	.word	0x200001f0
 8000ab4:	66666667 	.word	0x66666667

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <HAL_MspInit+0x44>)
 8000acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x44>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x44>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x44>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000aee:	f001 fa4d 	bl	8001f8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b09a      	sub	sp, #104	@ 0x68
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	2244      	movs	r2, #68	@ 0x44
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 fe5d 	bl	80047e0 <memset>
  if(huart->Instance==USART2)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a4d      	ldr	r2, [pc, #308]	@ (8000c60 <HAL_UART_MspInit+0x160>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	f040 8092 	bne.w	8000c56 <HAL_UART_MspInit+0x156>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 ff62 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b4a:	f7ff fea9 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4e:	4b45      	ldr	r3, [pc, #276]	@ (8000c64 <HAL_UART_MspInit+0x164>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b52:	4a44      	ldr	r2, [pc, #272]	@ (8000c64 <HAL_UART_MspInit+0x164>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b5a:	4b42      	ldr	r3, [pc, #264]	@ (8000c64 <HAL_UART_MspInit+0x164>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b3f      	ldr	r3, [pc, #252]	@ (8000c64 <HAL_UART_MspInit+0x164>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c64 <HAL_UART_MspInit+0x164>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b72:	4b3c      	ldr	r3, [pc, #240]	@ (8000c64 <HAL_UART_MspInit+0x164>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b96:	4619      	mov	r1, r3
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9c:	f000 ffb8 	bl	8001b10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000ba0:	4b31      	ldr	r3, [pc, #196]	@ (8000c68 <HAL_UART_MspInit+0x168>)
 8000ba2:	4a32      	ldr	r2, [pc, #200]	@ (8000c6c <HAL_UART_MspInit+0x16c>)
 8000ba4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000ba6:	4b30      	ldr	r3, [pc, #192]	@ (8000c68 <HAL_UART_MspInit+0x168>)
 8000ba8:	221a      	movs	r2, #26
 8000baa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bac:	4b2e      	ldr	r3, [pc, #184]	@ (8000c68 <HAL_UART_MspInit+0x168>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c68 <HAL_UART_MspInit+0x168>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c68 <HAL_UART_MspInit+0x168>)
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000c68 <HAL_UART_MspInit+0x168>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	@ (8000c68 <HAL_UART_MspInit+0x168>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000bca:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <HAL_UART_MspInit+0x168>)
 8000bcc:	2220      	movs	r2, #32
 8000bce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	@ (8000c68 <HAL_UART_MspInit+0x168>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000bd6:	4824      	ldr	r0, [pc, #144]	@ (8000c68 <HAL_UART_MspInit+0x168>)
 8000bd8:	f000 fc68 	bl	80014ac <HAL_DMA_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000be2:	f7ff fe5d 	bl	80008a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c68 <HAL_UART_MspInit+0x168>)
 8000bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000bee:	4a1e      	ldr	r2, [pc, #120]	@ (8000c68 <HAL_UART_MspInit+0x168>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <HAL_UART_MspInit+0x170>)
 8000bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c74 <HAL_UART_MspInit+0x174>)
 8000bf8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <HAL_UART_MspInit+0x170>)
 8000bfc:	221b      	movs	r2, #27
 8000bfe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <HAL_UART_MspInit+0x170>)
 8000c02:	2210      	movs	r2, #16
 8000c04:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <HAL_UART_MspInit+0x170>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <HAL_UART_MspInit+0x170>)
 8000c0e:	2280      	movs	r2, #128	@ 0x80
 8000c10:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <HAL_UART_MspInit+0x170>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <HAL_UART_MspInit+0x170>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <HAL_UART_MspInit+0x170>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_UART_MspInit+0x170>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c2a:	4811      	ldr	r0, [pc, #68]	@ (8000c70 <HAL_UART_MspInit+0x170>)
 8000c2c:	f000 fc3e 	bl	80014ac <HAL_DMA_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000c36:	f7ff fe33 	bl	80008a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c70 <HAL_UART_MspInit+0x170>)
 8000c3e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000c40:	4a0b      	ldr	r2, [pc, #44]	@ (8000c70 <HAL_UART_MspInit+0x170>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2026      	movs	r0, #38	@ 0x26
 8000c4c:	f000 fbf9 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c50:	2026      	movs	r0, #38	@ 0x26
 8000c52:	f000 fc10 	bl	8001476 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c56:	bf00      	nop
 8000c58:	3768      	adds	r7, #104	@ 0x68
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40004400 	.word	0x40004400
 8000c64:	40021000 	.word	0x40021000
 8000c68:	20000130 	.word	0x20000130
 8000c6c:	40020008 	.word	0x40020008
 8000c70:	20000190 	.word	0x20000190
 8000c74:	4002001c 	.word	0x4002001c

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <NMI_Handler+0x4>

08000c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <MemManage_Handler+0x4>

08000c90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <UsageFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cce:	f000 fabf 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <DMA1_Channel1_IRQHandler+0x10>)
 8000cde:	f000 fdc8 	bl	8001872 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000130 	.word	0x20000130

08000cec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <DMA1_Channel2_IRQHandler+0x10>)
 8000cf2:	f000 fdbe 	bl	8001872 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000190 	.word	0x20000190

08000d00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_IRQn 0 */
  if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 8000d04:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <USART2_IRQHandler+0x2c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 0310 	and.w	r3, r3, #16
 8000d0e:	2b10      	cmp	r3, #16
 8000d10:	d106      	bne.n	8000d20 <USART2_IRQHandler+0x20>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <USART2_IRQHandler+0x2c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2210      	movs	r2, #16
 8000d18:	621a      	str	r2, [r3, #32]
		uart_dma_handle_idle(&huart2);
 8000d1a:	4804      	ldr	r0, [pc, #16]	@ (8000d2c <USART2_IRQHandler+0x2c>)
 8000d1c:	f000 f876 	bl	8000e0c <uart_dma_handle_idle>
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <USART2_IRQHandler+0x2c>)
 8000d22:	f002 f98b 	bl	800303c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000009c 	.word	0x2000009c

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	@ (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f003 fd46 	bl	80047f0 <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	@ (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20008000 	.word	0x20008000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	200001f8 	.word	0x200001f8
 8000d98:	20000658 	.word	0x20000658

08000d9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <uart_dma_init>:

static UART_HandleTypeDef* uart_dma_handle = NULL;
static uint8_t dma_rx_buffer[UART_RX_BUFFER_SIZE];
static uint16_t last_read_pos = 0;

void uart_dma_init(UART_HandleTypeDef* huart) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
    if (huart == NULL) return;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d015      	beq.n	8000dfa <uart_dma_init+0x3a>
    uart_dma_handle = huart;
 8000dce:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <uart_dma_init+0x44>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(uart_dma_handle, dma_rx_buffer, UART_RX_BUFFER_SIZE);
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <uart_dma_init+0x44>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ddc:	490a      	ldr	r1, [pc, #40]	@ (8000e08 <uart_dma_init+0x48>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 f8e0 	bl	8002fa4 <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(uart_dma_handle, UART_IT_IDLE);
 8000de4:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <uart_dma_init+0x44>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <uart_dma_init+0x44>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0210 	orr.w	r2, r2, #16
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	e000      	b.n	8000dfc <uart_dma_init+0x3c>
    if (huart == NULL) return;
 8000dfa:	bf00      	nop
}
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200001fc 	.word	0x200001fc
 8000e08:	20000200 	.word	0x20000200

08000e0c <uart_dma_handle_idle>:

void uart_dma_handle_idle(UART_HandleTypeDef* huart) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    if (huart != uart_dma_handle) return;
 8000e14:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <uart_dma_handle_idle+0x28>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d104      	bne.n	8000e28 <uart_dma_handle_idle+0x1c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2210      	movs	r2, #16
 8000e24:	621a      	str	r2, [r3, #32]
 8000e26:	e000      	b.n	8000e2a <uart_dma_handle_idle+0x1e>
    if (huart != uart_dma_handle) return;
 8000e28:	bf00      	nop
}
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	200001fc 	.word	0x200001fc

08000e38 <uart_dma_get_new_bytes>:

const uint8_t* uart_dma_get_new_bytes(uint16_t* count) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
    static uint8_t temp_buf[UART_RX_BUFFER_SIZE];
    if (uart_dma_handle == NULL) {
 8000e40:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef4 <uart_dma_get_new_bytes+0xbc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d104      	bne.n	8000e52 <uart_dma_get_new_bytes+0x1a>
        *count = 0;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	801a      	strh	r2, [r3, #0]
        return temp_buf;
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef8 <uart_dma_get_new_bytes+0xc0>)
 8000e50:	e04c      	b.n	8000eec <uart_dma_get_new_bytes+0xb4>
    }

    uint16_t dma_pos = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart_dma_handle->hdmarx);
 8000e52:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <uart_dma_get_new_bytes+0xbc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000e64:	81bb      	strh	r3, [r7, #12]
    uint16_t temp_count = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	81fb      	strh	r3, [r7, #14]

    if (dma_pos != last_read_pos) {
 8000e6a:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <uart_dma_get_new_bytes+0xc4>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	89ba      	ldrh	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d037      	beq.n	8000ee4 <uart_dma_get_new_bytes+0xac>
        if (dma_pos > last_read_pos) {
 8000e74:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <uart_dma_get_new_bytes+0xc4>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	89ba      	ldrh	r2, [r7, #12]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d90f      	bls.n	8000e9e <uart_dma_get_new_bytes+0x66>
            temp_count = dma_pos - last_read_pos;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <uart_dma_get_new_bytes+0xc4>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	89ba      	ldrh	r2, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	81fb      	strh	r3, [r7, #14]
            memcpy(temp_buf, &dma_rx_buffer[last_read_pos], temp_count);
 8000e88:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <uart_dma_get_new_bytes+0xc4>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <uart_dma_get_new_bytes+0xc8>)
 8000e90:	4413      	add	r3, r2
 8000e92:	89fa      	ldrh	r2, [r7, #14]
 8000e94:	4619      	mov	r1, r3
 8000e96:	4818      	ldr	r0, [pc, #96]	@ (8000ef8 <uart_dma_get_new_bytes+0xc0>)
 8000e98:	f003 fcd6 	bl	8004848 <memcpy>
 8000e9c:	e01f      	b.n	8000ede <uart_dma_get_new_bytes+0xa6>
        } else {
            temp_count = (UART_RX_BUFFER_SIZE - last_read_pos) + dma_pos;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <uart_dma_get_new_bytes+0xc4>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	89ba      	ldrh	r2, [r7, #12]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000eac:	81fb      	strh	r3, [r7, #14]
            memcpy(temp_buf, &dma_rx_buffer[last_read_pos], UART_RX_BUFFER_SIZE - last_read_pos);
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <uart_dma_get_new_bytes+0xc4>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <uart_dma_get_new_bytes+0xc8>)
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a10      	ldr	r2, [pc, #64]	@ (8000efc <uart_dma_get_new_bytes+0xc4>)
 8000eba:	8812      	ldrh	r2, [r2, #0]
 8000ebc:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <uart_dma_get_new_bytes+0xc0>)
 8000ec4:	f003 fcc0 	bl	8004848 <memcpy>
            memcpy(&temp_buf[UART_RX_BUFFER_SIZE - last_read_pos], dma_rx_buffer, dma_pos);
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <uart_dma_get_new_bytes+0xc4>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000ed0:	4a09      	ldr	r2, [pc, #36]	@ (8000ef8 <uart_dma_get_new_bytes+0xc0>)
 8000ed2:	4413      	add	r3, r2
 8000ed4:	89ba      	ldrh	r2, [r7, #12]
 8000ed6:	490a      	ldr	r1, [pc, #40]	@ (8000f00 <uart_dma_get_new_bytes+0xc8>)
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f003 fcb5 	bl	8004848 <memcpy>
        }
        last_read_pos = dma_pos;
 8000ede:	4a07      	ldr	r2, [pc, #28]	@ (8000efc <uart_dma_get_new_bytes+0xc4>)
 8000ee0:	89bb      	ldrh	r3, [r7, #12]
 8000ee2:	8013      	strh	r3, [r2, #0]
    }

    *count = temp_count;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	89fa      	ldrh	r2, [r7, #14]
 8000ee8:	801a      	strh	r2, [r3, #0]
    return temp_buf;
 8000eea:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <uart_dma_get_new_bytes+0xc0>)
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200001fc 	.word	0x200001fc
 8000ef8:	20000304 	.word	0x20000304
 8000efc:	20000300 	.word	0x20000300
 8000f00:	20000200 	.word	0x20000200

08000f04 <uart_dma_send>:

void uart_dma_send(const uint8_t* data, uint16_t size) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
    if (uart_dma_handle == NULL || data == NULL || size == 0) return;
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <uart_dma_send+0x3c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00e      	beq.n	8000f36 <uart_dma_send+0x32>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00b      	beq.n	8000f36 <uart_dma_send+0x32>
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d008      	beq.n	8000f36 <uart_dma_send+0x32>
    HAL_UART_Transmit(uart_dma_handle, (uint8_t*)data, size, HAL_MAX_DELAY);
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <uart_dma_send+0x3c>)
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	887a      	ldrh	r2, [r7, #2]
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f001 ffaa 	bl	8002e88 <HAL_UART_Transmit>
 8000f34:	e000      	b.n	8000f38 <uart_dma_send+0x34>
    if (uart_dma_handle == NULL || data == NULL || size == 0) return;
 8000f36:	bf00      	nop
}
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200001fc 	.word	0x200001fc

08000f44 <vt100_send>:
#define VT100_PRINT_BUFFER_SIZE  64
#define VT100_CMD_BUFFER_SIZE 	 32
#define VT100_NUMBER_BUFFER_SIZE 16
#define VT100_FORMAT_BUFFER_SIZE 8

static void vt100_send(const char* str) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    uart_dma_send((const uint8_t*)str, strlen(str));
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff f967 	bl	8000220 <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ffd3 	bl	8000f04 <uart_dma_send>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <vt100_write_SRAM_text>:

static void vt100_send_char(char c) {
    uart_dma_send((const uint8_t*)&c, 1);
}

void vt100_write_SRAM_text(const char* str) {
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
    vt100_send(str);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffe8 	bl	8000f44 <vt100_send>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <vt100_write_SRAM_line>:

void vt100_write_SRAM_line(const char* str) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    vt100_send(str);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ffdd 	bl	8000f44 <vt100_send>
    vt100_send("\r\n");
 8000f8a:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <vt100_write_SRAM_line+0x1c>)
 8000f8c:	f7ff ffda 	bl	8000f44 <vt100_send>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	0800520c 	.word	0x0800520c

08000f9c <vt100_goto>:

    vt100_send(buffer);
}

// VT100 controls
void vt100_goto(uint8_t row, uint8_t col) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	@ 0x30
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	71bb      	strb	r3, [r7, #6]
    char cmd[VT100_CMD_BUFFER_SIZE];
    snprintf(cmd, sizeof(cmd), VT100_CURSOR_POSITION, row, col);
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	f107 0008 	add.w	r0, r7, #8
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	4a06      	ldr	r2, [pc, #24]	@ (8000fd4 <vt100_goto+0x38>)
 8000fba:	2120      	movs	r1, #32
 8000fbc:	f003 fbda 	bl	8004774 <sniprintf>
    vt100_send(cmd);
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ffbd 	bl	8000f44 <vt100_send>
}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	@ 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	08005224 	.word	0x08005224

08000fd8 <vt100_goto_line>:

void vt100_goto_line(uint8_t line) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
    vt100_goto(line, 1);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ffd8 	bl	8000f9c <vt100_goto>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <vt100_clear_screen>:

void vt100_clear_screen(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    vt100_send(VT100_CLEAR_SCREEN);
 8000ff8:	4803      	ldr	r0, [pc, #12]	@ (8001008 <vt100_clear_screen+0x14>)
 8000ffa:	f7ff ffa3 	bl	8000f44 <vt100_send>
    vt100_send(VT100_CURSOR_HOME);
 8000ffe:	4803      	ldr	r0, [pc, #12]	@ (800100c <vt100_clear_screen+0x18>)
 8001000:	f7ff ffa0 	bl	8000f44 <vt100_send>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	08005230 	.word	0x08005230
 800100c:	08005238 	.word	0x08005238

08001010 <vt100_clear_line>:

void vt100_clear_line(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    vt100_send(VT100_CLEAR_LINE);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <vt100_clear_line+0x10>)
 8001016:	f7ff ff95 	bl	8000f44 <vt100_send>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	0800523c 	.word	0x0800523c

08001024 <vt100_cursor_hide>:

void vt100_cursor_hide(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    vt100_send(VT100_CURSOR_HIDE);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <vt100_cursor_hide+0x10>)
 800102a:	f7ff ff8b 	bl	8000f44 <vt100_send>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	08005244 	.word	0x08005244

08001038 <vt100_cursor_show>:

void vt100_cursor_show(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
    vt100_send(VT100_CURSOR_SHOW);
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <vt100_cursor_show+0x10>)
 800103e:	f7ff ff81 	bl	8000f44 <vt100_send>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	0800524c 	.word	0x0800524c

0800104c <vt100_set_color>:

void vt100_set_color(const char* attr) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    if (attr) vt100_send(attr);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <vt100_set_color+0x14>
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff72 	bl	8000f44 <vt100_send>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <vt100_reset_attributes>:

void vt100_reset_attributes(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
    vt100_send(VT100_RESET_ATTRIBUTES);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <vt100_reset_attributes+0x10>)
 800106e:	f7ff ff69 	bl	8000f44 <vt100_send>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	08005254 	.word	0x08005254

0800107c <vt100_process_rx_chunk>:
// RX buffering
static uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
static uint16_t rx_head = 0;
static uint16_t rx_tail = 0;

void vt100_process_rx_chunk(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
    uint16_t new_bytes;
    const uint8_t* data = uart_dma_get_new_bytes(&new_bytes);
 8001082:	1dbb      	adds	r3, r7, #6
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fed7 	bl	8000e38 <uart_dma_get_new_bytes>
 800108a:	60b8      	str	r0, [r7, #8]

    for (uint16_t i = 0; i < new_bytes; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	81fb      	strh	r3, [r7, #14]
 8001090:	e016      	b.n	80010c0 <vt100_process_rx_chunk+0x44>
        rx_buffer[rx_head++] = data[i];
 8001092:	89fb      	ldrh	r3, [r7, #14]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	441a      	add	r2, r3
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <vt100_process_rx_chunk+0x58>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	1c59      	adds	r1, r3, #1
 800109e:	b288      	uxth	r0, r1
 80010a0:	490c      	ldr	r1, [pc, #48]	@ (80010d4 <vt100_process_rx_chunk+0x58>)
 80010a2:	8008      	strh	r0, [r1, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	7812      	ldrb	r2, [r2, #0]
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <vt100_process_rx_chunk+0x5c>)
 80010aa:	545a      	strb	r2, [r3, r1]
        if (rx_head >= UART_RX_BUFFER_SIZE) rx_head = 0;
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <vt100_process_rx_chunk+0x58>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	2bff      	cmp	r3, #255	@ 0xff
 80010b2:	d902      	bls.n	80010ba <vt100_process_rx_chunk+0x3e>
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <vt100_process_rx_chunk+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < new_bytes; i++) {
 80010ba:	89fb      	ldrh	r3, [r7, #14]
 80010bc:	3301      	adds	r3, #1
 80010be:	81fb      	strh	r3, [r7, #14]
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	89fa      	ldrh	r2, [r7, #14]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d3e4      	bcc.n	8001092 <vt100_process_rx_chunk+0x16>
    }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000504 	.word	0x20000504
 80010d8:	20000404 	.word	0x20000404

080010dc <vt100_char_available>:

uint8_t vt100_char_available(void) {
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
    return rx_head != rx_tail;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <vt100_char_available+0x20>)
 80010e2:	881a      	ldrh	r2, [r3, #0]
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <vt100_char_available+0x24>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	bf14      	ite	ne
 80010ec:	2301      	movne	r3, #1
 80010ee:	2300      	moveq	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	20000504 	.word	0x20000504
 8001100:	20000506 	.word	0x20000506

08001104 <vt100_read_char>:

uint8_t vt100_read_char(void) {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
    if (rx_head == rx_tail) return 0;
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <vt100_read_char+0x48>)
 800110c:	881a      	ldrh	r2, [r3, #0]
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <vt100_read_char+0x4c>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d101      	bne.n	800111a <vt100_read_char+0x16>
 8001116:	2300      	movs	r3, #0
 8001118:	e011      	b.n	800113e <vt100_read_char+0x3a>
    uint8_t c = rx_buffer[rx_tail++];
 800111a:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <vt100_read_char+0x4c>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	b291      	uxth	r1, r2
 8001122:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <vt100_read_char+0x4c>)
 8001124:	8011      	strh	r1, [r2, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <vt100_read_char+0x50>)
 800112a:	5c9b      	ldrb	r3, [r3, r2]
 800112c:	71fb      	strb	r3, [r7, #7]
    if (rx_tail >= UART_RX_BUFFER_SIZE) rx_tail = 0;
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <vt100_read_char+0x4c>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	2bff      	cmp	r3, #255	@ 0xff
 8001134:	d902      	bls.n	800113c <vt100_read_char+0x38>
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <vt100_read_char+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	801a      	strh	r2, [r3, #0]
    return c;
 800113c:	79fb      	ldrb	r3, [r7, #7]
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000504 	.word	0x20000504
 8001150:	20000506 	.word	0x20000506
 8001154:	20000404 	.word	0x20000404

08001158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001158:	480d      	ldr	r0, [pc, #52]	@ (8001190 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800115a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800115c:	f7ff fe1e 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <LoopForever+0x6>)
  ldr r1, =_edata
 8001162:	490d      	ldr	r1, [pc, #52]	@ (8001198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <LoopForever+0xe>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001178:	4c0a      	ldr	r4, [pc, #40]	@ (80011a4 <LoopForever+0x16>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001186:	f003 fb39 	bl	80047fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800118a:	f7ff fa37 	bl	80005fc <main>

0800118e <LoopForever>:

LoopForever:
    b LoopForever
 800118e:	e7fe      	b.n	800118e <LoopForever>
  ldr   r0, =_estack
 8001190:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800119c:	080052e0 	.word	0x080052e0
  ldr r2, =_sbss
 80011a0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80011a4:	20000654 	.word	0x20000654

080011a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC1_2_IRQHandler>

080011aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 f939 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 f80e 	bl	80011dc <HAL_InitTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	e001      	b.n	80011d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011cc:	f7ff fc74 	bl	8000ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d0:	79fb      	ldrb	r3, [r7, #7]

}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011e8:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <HAL_InitTick+0x68>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d022      	beq.n	8001236 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011f0:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <HAL_InitTick+0x6c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <HAL_InitTick+0x68>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001200:	fbb2 f3f3 	udiv	r3, r2, r3
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f944 	bl	8001492 <HAL_SYSTICK_Config>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10f      	bne.n	8001230 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	d809      	bhi.n	800122a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001216:	2200      	movs	r2, #0
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800121e:	f000 f910 	bl	8001442 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001222:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <HAL_InitTick+0x70>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e007      	b.n	800123a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
 800122e:	e004      	b.n	800123a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e001      	b.n	800123a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800123a:	7bfb      	ldrb	r3, [r7, #15]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000002c 	.word	0x2000002c
 8001248:	20000024 	.word	0x20000024
 800124c:	20000028 	.word	0x20000028

08001250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <HAL_IncTick+0x1c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <HAL_IncTick+0x20>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	4a03      	ldr	r2, [pc, #12]	@ (800126c <HAL_IncTick+0x1c>)
 8001260:	6013      	str	r3, [r2, #0]
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20000508 	.word	0x20000508
 8001270:	2000002c 	.word	0x2000002c

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000508 	.word	0x20000508

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4907      	ldr	r1, [pc, #28]	@ (8001328 <__NVIC_EnableIRQ+0x38>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	@ (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	@ (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	@ 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800140c:	f7ff ff8e 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff29 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001450:	f7ff ff40 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff ff90 	bl	8001380 <NVIC_EncodePriority>
 8001460:	4602      	mov	r2, r0
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff5f 	bl	800132c <__NVIC_SetPriority>
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff33 	bl	80012f0 <__NVIC_EnableIRQ>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffa4 	bl	80013e8 <SysTick_Config>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e08d      	b.n	80015da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b47      	ldr	r3, [pc, #284]	@ (80015e4 <HAL_DMA_Init+0x138>)
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d80f      	bhi.n	80014ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b45      	ldr	r3, [pc, #276]	@ (80015e8 <HAL_DMA_Init+0x13c>)
 80014d2:	4413      	add	r3, r2
 80014d4:	4a45      	ldr	r2, [pc, #276]	@ (80015ec <HAL_DMA_Init+0x140>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	009a      	lsls	r2, r3, #2
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a42      	ldr	r2, [pc, #264]	@ (80015f0 <HAL_DMA_Init+0x144>)
 80014e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80014e8:	e00e      	b.n	8001508 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b40      	ldr	r3, [pc, #256]	@ (80015f4 <HAL_DMA_Init+0x148>)
 80014f2:	4413      	add	r3, r2
 80014f4:	4a3d      	ldr	r2, [pc, #244]	@ (80015ec <HAL_DMA_Init+0x140>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	009a      	lsls	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a3c      	ldr	r2, [pc, #240]	@ (80015f8 <HAL_DMA_Init+0x14c>)
 8001506:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800151e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001522:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800152c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 fa76 	bl	8001a4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001568:	d102      	bne.n	8001570 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001584:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d010      	beq.n	80015b0 <HAL_DMA_Init+0x104>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b04      	cmp	r3, #4
 8001594:	d80c      	bhi.n	80015b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fa96 	bl	8001ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	e008      	b.n	80015c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40020407 	.word	0x40020407
 80015e8:	bffdfff8 	.word	0xbffdfff8
 80015ec:	cccccccd 	.word	0xcccccccd
 80015f0:	40020000 	.word	0x40020000
 80015f4:	bffdfbf8 	.word	0xbffdfbf8
 80015f8:	40020400 	.word	0x40020400

080015fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_DMA_Start_IT+0x20>
 8001618:	2302      	movs	r3, #2
 800161a:	e066      	b.n	80016ea <HAL_DMA_Start_IT+0xee>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d155      	bne.n	80016dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0201 	bic.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 f9bb 	bl	80019d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	2b00      	cmp	r3, #0
 8001660:	d008      	beq.n	8001674 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 020e 	orr.w	r2, r2, #14
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e00f      	b.n	8001694 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0204 	bic.w	r2, r2, #4
 8001682:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 020a 	orr.w	r2, r2, #10
 8001692:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d007      	beq.n	80016b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0201 	orr.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e005      	b.n	80016e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016e4:	2302      	movs	r3, #2
 80016e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b085      	sub	sp, #20
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d005      	beq.n	8001716 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2204      	movs	r2, #4
 800170e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e037      	b.n	8001786 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 020e 	bic.w	r2, r2, #14
 8001724:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001734:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0201 	bic.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f003 021f 	and.w	r2, r3, #31
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f202 	lsl.w	r2, r1, r2
 8001758:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001762:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00c      	beq.n	8001786 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001776:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800177a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001784:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d00d      	beq.n	80017d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2204      	movs	r2, #4
 80017c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	e047      	b.n	8001868 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 020e 	bic.w	r2, r2, #14
 80017e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0201 	bic.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001802:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001806:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	2101      	movs	r1, #1
 8001816:	fa01 f202 	lsl.w	r2, r1, r2
 800181a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001824:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00c      	beq.n	8001848 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001838:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800183c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001846:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	4798      	blx	r3
    }
  }
  return status;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	2204      	movs	r2, #4
 8001894:	409a      	lsls	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d026      	beq.n	80018ec <HAL_DMA_IRQHandler+0x7a>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d021      	beq.n	80018ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0320 	and.w	r3, r3, #32
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d107      	bne.n	80018c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0204 	bic.w	r2, r2, #4
 80018c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f003 021f 	and.w	r2, r3, #31
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	2104      	movs	r1, #4
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d071      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80018ea:	e06c      	b.n	80019c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	2202      	movs	r2, #2
 80018f6:	409a      	lsls	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d02e      	beq.n	800195e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d029      	beq.n	800195e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0320 	and.w	r3, r3, #32
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10b      	bne.n	8001930 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 020a 	bic.w	r2, r2, #10
 8001926:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	2102      	movs	r1, #2
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001950:	2b00      	cmp	r3, #0
 8001952:	d038      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800195c:	e033      	b.n	80019c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2208      	movs	r2, #8
 8001968:	409a      	lsls	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4013      	ands	r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d02a      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d025      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 020e 	bic.w	r2, r2, #14
 800198a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f202 	lsl.w	r2, r1, r2
 800199e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d004      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019c6:	bf00      	nop
 80019c8:	bf00      	nop
}
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	f003 021f 	and.w	r2, r3, #31
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	2101      	movs	r1, #1
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d108      	bne.n	8001a30 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a2e:	e007      	b.n	8001a40 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	60da      	str	r2, [r3, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d802      	bhi.n	8001a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001a60:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e001      	b.n	8001a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001a68:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	3b08      	subs	r3, #8
 8001a76:	4a12      	ldr	r2, [pc, #72]	@ (8001ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	009a      	lsls	r2, r3, #2
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001a96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001aa6:	bf00      	nop
 8001aa8:	371c      	adds	r7, #28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40020407 	.word	0x40020407
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020820 	.word	0x40020820
 8001ac0:	cccccccd 	.word	0xcccccccd
 8001ac4:	40020880 	.word	0x40020880

08001ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a08      	ldr	r2, [pc, #32]	@ (8001b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001aea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	2201      	movs	r2, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	1000823f 	.word	0x1000823f
 8001b0c:	40020940 	.word	0x40020940

08001b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b1e:	e15a      	b.n	8001dd6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2101      	movs	r1, #1
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 814c 	beq.w	8001dd0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d005      	beq.n	8001b50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d130      	bne.n	8001bb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b86:	2201      	movs	r2, #1
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	f003 0201 	and.w	r2, r3, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d017      	beq.n	8001bee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d123      	bne.n	8001c42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	08da      	lsrs	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3208      	adds	r2, #8
 8001c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	6939      	ldr	r1, [r7, #16]
 8001c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0203 	and.w	r2, r3, #3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80a6 	beq.w	8001dd0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c84:	4b5b      	ldr	r3, [pc, #364]	@ (8001df4 <HAL_GPIO_Init+0x2e4>)
 8001c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c88:	4a5a      	ldr	r2, [pc, #360]	@ (8001df4 <HAL_GPIO_Init+0x2e4>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c90:	4b58      	ldr	r3, [pc, #352]	@ (8001df4 <HAL_GPIO_Init+0x2e4>)
 8001c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c9c:	4a56      	ldr	r2, [pc, #344]	@ (8001df8 <HAL_GPIO_Init+0x2e8>)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cc6:	d01f      	beq.n	8001d08 <HAL_GPIO_Init+0x1f8>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a4c      	ldr	r2, [pc, #304]	@ (8001dfc <HAL_GPIO_Init+0x2ec>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d019      	beq.n	8001d04 <HAL_GPIO_Init+0x1f4>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a4b      	ldr	r2, [pc, #300]	@ (8001e00 <HAL_GPIO_Init+0x2f0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d013      	beq.n	8001d00 <HAL_GPIO_Init+0x1f0>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a4a      	ldr	r2, [pc, #296]	@ (8001e04 <HAL_GPIO_Init+0x2f4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00d      	beq.n	8001cfc <HAL_GPIO_Init+0x1ec>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a49      	ldr	r2, [pc, #292]	@ (8001e08 <HAL_GPIO_Init+0x2f8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d007      	beq.n	8001cf8 <HAL_GPIO_Init+0x1e8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a48      	ldr	r2, [pc, #288]	@ (8001e0c <HAL_GPIO_Init+0x2fc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_GPIO_Init+0x1e4>
 8001cf0:	2305      	movs	r3, #5
 8001cf2:	e00a      	b.n	8001d0a <HAL_GPIO_Init+0x1fa>
 8001cf4:	2306      	movs	r3, #6
 8001cf6:	e008      	b.n	8001d0a <HAL_GPIO_Init+0x1fa>
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	e006      	b.n	8001d0a <HAL_GPIO_Init+0x1fa>
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e004      	b.n	8001d0a <HAL_GPIO_Init+0x1fa>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e002      	b.n	8001d0a <HAL_GPIO_Init+0x1fa>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_GPIO_Init+0x1fa>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	f002 0203 	and.w	r2, r2, #3
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	4093      	lsls	r3, r2
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1a:	4937      	ldr	r1, [pc, #220]	@ (8001df8 <HAL_GPIO_Init+0x2e8>)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d28:	4b39      	ldr	r3, [pc, #228]	@ (8001e10 <HAL_GPIO_Init+0x300>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d4c:	4a30      	ldr	r2, [pc, #192]	@ (8001e10 <HAL_GPIO_Init+0x300>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d52:	4b2f      	ldr	r3, [pc, #188]	@ (8001e10 <HAL_GPIO_Init+0x300>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d76:	4a26      	ldr	r2, [pc, #152]	@ (8001e10 <HAL_GPIO_Init+0x300>)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d7c:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <HAL_GPIO_Init+0x300>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001da0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e10 <HAL_GPIO_Init+0x300>)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_GPIO_Init+0x300>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dca:	4a11      	ldr	r2, [pc, #68]	@ (8001e10 <HAL_GPIO_Init+0x300>)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f47f ae9d 	bne.w	8001b20 <HAL_GPIO_Init+0x10>
  }
}
 8001de6:	bf00      	nop
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	48000400 	.word	0x48000400
 8001e00:	48000800 	.word	0x48000800
 8001e04:	48000c00 	.word	0x48000c00
 8001e08:	48001000 	.word	0x48001000
 8001e0c:	48001400 	.word	0x48001400
 8001e10:	40010400 	.word	0x40010400

08001e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
 8001e20:	4613      	mov	r3, r2
 8001e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e24:	787b      	ldrb	r3, [r7, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d141      	bne.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e52:	4b4b      	ldr	r3, [pc, #300]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5e:	d131      	bne.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e60:	4b47      	ldr	r3, [pc, #284]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e66:	4a46      	ldr	r2, [pc, #280]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e70:	4b43      	ldr	r3, [pc, #268]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e78:	4a41      	ldr	r2, [pc, #260]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e80:	4b40      	ldr	r3, [pc, #256]	@ (8001f84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2232      	movs	r2, #50	@ 0x32
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	0c9b      	lsrs	r3, r3, #18
 8001e92:	3301      	adds	r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e96:	e002      	b.n	8001e9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e9e:	4b38      	ldr	r3, [pc, #224]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eaa:	d102      	bne.n	8001eb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f2      	bne.n	8001e98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eb2:	4b33      	ldr	r3, [pc, #204]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ebe:	d158      	bne.n	8001f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e057      	b.n	8001f74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eca:	4a2d      	ldr	r2, [pc, #180]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ed0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ed4:	e04d      	b.n	8001f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001edc:	d141      	bne.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ede:	4b28      	ldr	r3, [pc, #160]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eea:	d131      	bne.n	8001f50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eec:	4b24      	ldr	r3, [pc, #144]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ef2:	4a23      	ldr	r2, [pc, #140]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001efc:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f04:	4a1e      	ldr	r2, [pc, #120]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2232      	movs	r2, #50	@ 0x32
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	0c9b      	lsrs	r3, r3, #18
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f22:	e002      	b.n	8001f2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f36:	d102      	bne.n	8001f3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f2      	bne.n	8001f24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f4a:	d112      	bne.n	8001f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e011      	b.n	8001f74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f50:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f56:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f60:	e007      	b.n	8001f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f62:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f6a:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40007000 	.word	0x40007000
 8001f84:	20000024 	.word	0x20000024
 8001f88:	431bde83 	.word	0x431bde83

08001f8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f9a:	6093      	str	r3, [r2, #8]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40007000 	.word	0x40007000

08001fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e2fe      	b.n	80025bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d075      	beq.n	80020b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fca:	4b97      	ldr	r3, [pc, #604]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd4:	4b94      	ldr	r3, [pc, #592]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	d102      	bne.n	8001fea <HAL_RCC_OscConfig+0x3e>
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d002      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x44>
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d10b      	bne.n	8002008 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	4b8d      	ldr	r3, [pc, #564]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d05b      	beq.n	80020b4 <HAL_RCC_OscConfig+0x108>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d157      	bne.n	80020b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e2d9      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002010:	d106      	bne.n	8002020 <HAL_RCC_OscConfig+0x74>
 8002012:	4b85      	ldr	r3, [pc, #532]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a84      	ldr	r2, [pc, #528]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e01d      	b.n	800205c <HAL_RCC_OscConfig+0xb0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x98>
 800202a:	4b7f      	ldr	r3, [pc, #508]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7e      	ldr	r2, [pc, #504]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b7c      	ldr	r3, [pc, #496]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a7b      	ldr	r2, [pc, #492]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0xb0>
 8002044:	4b78      	ldr	r3, [pc, #480]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a77      	ldr	r2, [pc, #476]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 800204a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b75      	ldr	r3, [pc, #468]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a74      	ldr	r2, [pc, #464]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800205a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff f906 	bl	8001274 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff f902 	bl	8001274 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	@ 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e29e      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800207e:	4b6a      	ldr	r3, [pc, #424]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0xc0>
 800208a:	e014      	b.n	80020b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff f8f2 	bl	8001274 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff f8ee 	bl	8001274 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	@ 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e28a      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020a6:	4b60      	ldr	r3, [pc, #384]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0xe8>
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d075      	beq.n	80021ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c2:	4b59      	ldr	r3, [pc, #356]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020cc:	4b56      	ldr	r3, [pc, #344]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	d102      	bne.n	80020e2 <HAL_RCC_OscConfig+0x136>
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_OscConfig+0x13c>
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d11f      	bne.n	8002128 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_OscConfig+0x154>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e25d      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b49      	ldr	r3, [pc, #292]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	4946      	ldr	r1, [pc, #280]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002114:	4b45      	ldr	r3, [pc, #276]	@ (800222c <HAL_RCC_OscConfig+0x280>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff f85f 	bl	80011dc <HAL_InitTick>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d043      	beq.n	80021ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e249      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d023      	beq.n	8002178 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002130:	4b3d      	ldr	r3, [pc, #244]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a3c      	ldr	r2, [pc, #240]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff f89a 	bl	8001274 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002144:	f7ff f896 	bl	8001274 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e232      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002156:	4b34      	ldr	r3, [pc, #208]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b31      	ldr	r3, [pc, #196]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	061b      	lsls	r3, r3, #24
 8002170:	492d      	ldr	r1, [pc, #180]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
 8002176:	e01a      	b.n	80021ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002178:	4b2b      	ldr	r3, [pc, #172]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2a      	ldr	r2, [pc, #168]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 800217e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff f876 	bl	8001274 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218c:	f7ff f872 	bl	8001274 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e20e      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800219e:	4b22      	ldr	r3, [pc, #136]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x1e0>
 80021aa:	e000      	b.n	80021ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d041      	beq.n	800223e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01c      	beq.n	80021fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c2:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 80021c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c8:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d2:	f7ff f84f 	bl	8001274 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021da:	f7ff f84b 	bl	8001274 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e1e7      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0ef      	beq.n	80021da <HAL_RCC_OscConfig+0x22e>
 80021fa:	e020      	b.n	800223e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 80021fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002202:	4a09      	ldr	r2, [pc, #36]	@ (8002228 <HAL_RCC_OscConfig+0x27c>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220c:	f7ff f832 	bl	8001274 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002212:	e00d      	b.n	8002230 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002214:	f7ff f82e 	bl	8001274 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d906      	bls.n	8002230 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e1ca      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002230:	4b8c      	ldr	r3, [pc, #560]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1ea      	bne.n	8002214 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80a6 	beq.w	8002398 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224c:	2300      	movs	r3, #0
 800224e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002250:	4b84      	ldr	r3, [pc, #528]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_OscConfig+0x2b4>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x2b6>
 8002260:	2300      	movs	r3, #0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00d      	beq.n	8002282 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	4b7f      	ldr	r3, [pc, #508]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	4a7e      	ldr	r2, [pc, #504]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002270:	6593      	str	r3, [r2, #88]	@ 0x58
 8002272:	4b7c      	ldr	r3, [pc, #496]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800227e:	2301      	movs	r3, #1
 8002280:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002282:	4b79      	ldr	r3, [pc, #484]	@ (8002468 <HAL_RCC_OscConfig+0x4bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d118      	bne.n	80022c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228e:	4b76      	ldr	r3, [pc, #472]	@ (8002468 <HAL_RCC_OscConfig+0x4bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a75      	ldr	r2, [pc, #468]	@ (8002468 <HAL_RCC_OscConfig+0x4bc>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229a:	f7fe ffeb 	bl	8001274 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7fe ffe7 	bl	8001274 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e183      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002468 <HAL_RCC_OscConfig+0x4bc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d108      	bne.n	80022da <HAL_RCC_OscConfig+0x32e>
 80022c8:	4b66      	ldr	r3, [pc, #408]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ce:	4a65      	ldr	r2, [pc, #404]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022d8:	e024      	b.n	8002324 <HAL_RCC_OscConfig+0x378>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d110      	bne.n	8002304 <HAL_RCC_OscConfig+0x358>
 80022e2:	4b60      	ldr	r3, [pc, #384]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e8:	4a5e      	ldr	r2, [pc, #376]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002302:	e00f      	b.n	8002324 <HAL_RCC_OscConfig+0x378>
 8002304:	4b57      	ldr	r3, [pc, #348]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230a:	4a56      	ldr	r2, [pc, #344]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002314:	4b53      	ldr	r3, [pc, #332]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231a:	4a52      	ldr	r2, [pc, #328]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d016      	beq.n	800235a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7fe ffa2 	bl	8001274 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe ff9e 	bl	8001274 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e138      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234a:	4b46      	ldr	r3, [pc, #280]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ed      	beq.n	8002334 <HAL_RCC_OscConfig+0x388>
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe ff8b 	bl	8001274 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe ff87 	bl	8001274 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e121      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002378:	4b3a      	ldr	r3, [pc, #232]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1ed      	bne.n	8002362 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002386:	7ffb      	ldrb	r3, [r7, #31]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d105      	bne.n	8002398 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238c:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002390:	4a34      	ldr	r2, [pc, #208]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002392:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002396:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d03c      	beq.n	800241e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01c      	beq.n	80023e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80023ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023bc:	f7fe ff5a 	bl	8001274 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023c4:	f7fe ff56 	bl	8001274 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e0f2      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023d6:	4b23      	ldr	r3, [pc, #140]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80023d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ef      	beq.n	80023c4 <HAL_RCC_OscConfig+0x418>
 80023e4:	e01b      	b.n	800241e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80023e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7fe ff3d 	bl	8001274 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023fe:	f7fe ff39 	bl	8001274 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0d5      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002410:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002412:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1ef      	bne.n	80023fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80c9 	beq.w	80025ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b0c      	cmp	r3, #12
 8002432:	f000 8083 	beq.w	800253c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d15e      	bne.n	80024fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a08      	ldr	r2, [pc, #32]	@ (8002464 <HAL_RCC_OscConfig+0x4b8>)
 8002444:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe ff13 	bl	8001274 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002450:	e00c      	b.n	800246c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe ff0f 	bl	8001274 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d905      	bls.n	800246c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0ab      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
 8002464:	40021000 	.word	0x40021000
 8002468:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246c:	4b55      	ldr	r3, [pc, #340]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ec      	bne.n	8002452 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002478:	4b52      	ldr	r3, [pc, #328]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	4b52      	ldr	r3, [pc, #328]	@ (80025c8 <HAL_RCC_OscConfig+0x61c>)
 800247e:	4013      	ands	r3, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6a11      	ldr	r1, [r2, #32]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002488:	3a01      	subs	r2, #1
 800248a:	0112      	lsls	r2, r2, #4
 800248c:	4311      	orrs	r1, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002492:	0212      	lsls	r2, r2, #8
 8002494:	4311      	orrs	r1, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800249a:	0852      	lsrs	r2, r2, #1
 800249c:	3a01      	subs	r2, #1
 800249e:	0552      	lsls	r2, r2, #21
 80024a0:	4311      	orrs	r1, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024a6:	0852      	lsrs	r2, r2, #1
 80024a8:	3a01      	subs	r2, #1
 80024aa:	0652      	lsls	r2, r2, #25
 80024ac:	4311      	orrs	r1, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024b2:	06d2      	lsls	r2, r2, #27
 80024b4:	430a      	orrs	r2, r1
 80024b6:	4943      	ldr	r1, [pc, #268]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b41      	ldr	r3, [pc, #260]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a40      	ldr	r2, [pc, #256]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c8:	4b3e      	ldr	r3, [pc, #248]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a3d      	ldr	r2, [pc, #244]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fece 	bl	8001274 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe feca 	bl	8001274 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e066      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ee:	4b35      	ldr	r3, [pc, #212]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x530>
 80024fa:	e05e      	b.n	80025ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b31      	ldr	r3, [pc, #196]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a30      	ldr	r2, [pc, #192]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 8002502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe feb4 	bl	8001274 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe feb0 	bl	8001274 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e04c      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002522:	4b28      	ldr	r3, [pc, #160]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800252e:	4b25      	ldr	r3, [pc, #148]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	4924      	ldr	r1, [pc, #144]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 8002534:	4b25      	ldr	r3, [pc, #148]	@ (80025cc <HAL_RCC_OscConfig+0x620>)
 8002536:	4013      	ands	r3, r2
 8002538:	60cb      	str	r3, [r1, #12]
 800253a:	e03e      	b.n	80025ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e039      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002548:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <HAL_RCC_OscConfig+0x618>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 0203 	and.w	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	429a      	cmp	r2, r3
 800255a:	d12c      	bne.n	80025b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	3b01      	subs	r3, #1
 8002568:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d123      	bne.n	80025b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d11b      	bne.n	80025b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d113      	bne.n	80025b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	3b01      	subs	r3, #1
 800259c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d109      	bne.n	80025b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ac:	085b      	lsrs	r3, r3, #1
 80025ae:	3b01      	subs	r3, #1
 80025b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	019f800c 	.word	0x019f800c
 80025cc:	feeefffc 	.word	0xfeeefffc

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e11e      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b91      	ldr	r3, [pc, #580]	@ (8002830 <HAL_RCC_ClockConfig+0x260>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d910      	bls.n	8002618 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b8e      	ldr	r3, [pc, #568]	@ (8002830 <HAL_RCC_ClockConfig+0x260>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 020f 	bic.w	r2, r3, #15
 80025fe:	498c      	ldr	r1, [pc, #560]	@ (8002830 <HAL_RCC_ClockConfig+0x260>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b8a      	ldr	r3, [pc, #552]	@ (8002830 <HAL_RCC_ClockConfig+0x260>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e106      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d073      	beq.n	800270c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d129      	bne.n	8002680 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262c:	4b81      	ldr	r3, [pc, #516]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0f4      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800263c:	f000 f99e 	bl	800297c <RCC_GetSysClockFreqFromPLLSource>
 8002640:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4a7c      	ldr	r2, [pc, #496]	@ (8002838 <HAL_RCC_ClockConfig+0x268>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d93f      	bls.n	80026ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800264a:	4b7a      	ldr	r3, [pc, #488]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800265e:	2b00      	cmp	r3, #0
 8002660:	d033      	beq.n	80026ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002666:	2b00      	cmp	r3, #0
 8002668:	d12f      	bne.n	80026ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800266a:	4b72      	ldr	r3, [pc, #456]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002672:	4a70      	ldr	r2, [pc, #448]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 8002674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002678:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800267a:	2380      	movs	r3, #128	@ 0x80
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e024      	b.n	80026ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d107      	bne.n	8002698 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002688:	4b6a      	ldr	r3, [pc, #424]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0c6      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002698:	4b66      	ldr	r3, [pc, #408]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0be      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026a8:	f000 f8ce 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4a61      	ldr	r2, [pc, #388]	@ (8002838 <HAL_RCC_ClockConfig+0x268>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d909      	bls.n	80026ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026be:	4a5d      	ldr	r2, [pc, #372]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 80026c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4957      	ldr	r1, [pc, #348]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe fdca 	bl	8001274 <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7fe fdc6 	bl	8001274 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e095      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 020c 	and.w	r2, r3, #12
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	429a      	cmp	r2, r3
 800270a:	d1eb      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d023      	beq.n	8002760 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002724:	4b43      	ldr	r3, [pc, #268]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a42      	ldr	r2, [pc, #264]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 800272a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800272e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800273c:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002744:	4a3b      	ldr	r2, [pc, #236]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 8002746:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800274a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800274c:	4b39      	ldr	r3, [pc, #228]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4936      	ldr	r1, [pc, #216]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
 800275e:	e008      	b.n	8002772 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b80      	cmp	r3, #128	@ 0x80
 8002764:	d105      	bne.n	8002772 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002766:	4b33      	ldr	r3, [pc, #204]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	4a32      	ldr	r2, [pc, #200]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 800276c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002770:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002772:	4b2f      	ldr	r3, [pc, #188]	@ (8002830 <HAL_RCC_ClockConfig+0x260>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d21d      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002780:	4b2b      	ldr	r3, [pc, #172]	@ (8002830 <HAL_RCC_ClockConfig+0x260>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 020f 	bic.w	r2, r3, #15
 8002788:	4929      	ldr	r1, [pc, #164]	@ (8002830 <HAL_RCC_ClockConfig+0x260>)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002790:	f7fe fd70 	bl	8001274 <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	e00a      	b.n	80027ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002798:	f7fe fd6c 	bl	8001274 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e03b      	b.n	8002826 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <HAL_RCC_ClockConfig+0x260>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1ed      	bne.n	8002798 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4917      	ldr	r1, [pc, #92]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e6:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	490f      	ldr	r1, [pc, #60]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027fa:	f000 f825 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b0c      	ldr	r3, [pc, #48]	@ (8002834 <HAL_RCC_ClockConfig+0x264>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	490c      	ldr	r1, [pc, #48]	@ (800283c <HAL_RCC_ClockConfig+0x26c>)
 800280c:	5ccb      	ldrb	r3, [r1, r3]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <HAL_RCC_ClockConfig+0x270>)
 8002818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800281a:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <HAL_RCC_ClockConfig+0x274>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fcdc 	bl	80011dc <HAL_InitTick>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40022000 	.word	0x40022000
 8002834:	40021000 	.word	0x40021000
 8002838:	04c4b400 	.word	0x04c4b400
 800283c:	0800525c 	.word	0x0800525c
 8002840:	20000024 	.word	0x20000024
 8002844:	20000028 	.word	0x20000028

08002848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800284e:	4b2c      	ldr	r3, [pc, #176]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b04      	cmp	r3, #4
 8002858:	d102      	bne.n	8002860 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800285a:	4b2a      	ldr	r3, [pc, #168]	@ (8002904 <HAL_RCC_GetSysClockFreq+0xbc>)
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	e047      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002860:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d102      	bne.n	8002872 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800286c:	4b26      	ldr	r3, [pc, #152]	@ (8002908 <HAL_RCC_GetSysClockFreq+0xc0>)
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e03e      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002872:	4b23      	ldr	r3, [pc, #140]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d136      	bne.n	80028ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800287e:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002888:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	3301      	adds	r3, #1
 8002894:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d10c      	bne.n	80028b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800289c:	4a1a      	ldr	r2, [pc, #104]	@ (8002908 <HAL_RCC_GetSysClockFreq+0xc0>)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	4a16      	ldr	r2, [pc, #88]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a6:	68d2      	ldr	r2, [r2, #12]
 80028a8:	0a12      	lsrs	r2, r2, #8
 80028aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
      break;
 80028b4:	e00c      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028b6:	4a13      	ldr	r2, [pc, #76]	@ (8002904 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80028be:	4a10      	ldr	r2, [pc, #64]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c0:	68d2      	ldr	r2, [r2, #12]
 80028c2:	0a12      	lsrs	r2, r2, #8
 80028c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028c8:	fb02 f303 	mul.w	r3, r2, r3
 80028cc:	617b      	str	r3, [r7, #20]
      break;
 80028ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0e5b      	lsrs	r3, r3, #25
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	e001      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028f0:	693b      	ldr	r3, [r7, #16]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	00f42400 	.word	0x00f42400
 8002908:	016e3600 	.word	0x016e3600

0800290c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <HAL_RCC_GetHCLKFreq+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000024 	.word	0x20000024

08002924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002928:	f7ff fff0 	bl	800290c <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4904      	ldr	r1, [pc, #16]	@ (800294c <HAL_RCC_GetPCLK1Freq+0x28>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	0800526c 	.word	0x0800526c

08002950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002954:	f7ff ffda 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_RCC_GetPCLK2Freq+0x24>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	0adb      	lsrs	r3, r3, #11
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4904      	ldr	r1, [pc, #16]	@ (8002978 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	0800526c 	.word	0x0800526c

0800297c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002982:	4b1e      	ldr	r3, [pc, #120]	@ (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800298c:	4b1b      	ldr	r3, [pc, #108]	@ (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3301      	adds	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d10c      	bne.n	80029ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029a0:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	4a14      	ldr	r2, [pc, #80]	@ (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029aa:	68d2      	ldr	r2, [r2, #12]
 80029ac:	0a12      	lsrs	r2, r2, #8
 80029ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	617b      	str	r3, [r7, #20]
    break;
 80029b8:	e00c      	b.n	80029d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ba:	4a12      	ldr	r2, [pc, #72]	@ (8002a04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	4a0e      	ldr	r2, [pc, #56]	@ (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	0a12      	lsrs	r2, r2, #8
 80029c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
    break;
 80029d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0e5b      	lsrs	r3, r3, #25
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	3301      	adds	r3, #1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029ee:	687b      	ldr	r3, [r7, #4]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40021000 	.word	0x40021000
 8002a00:	016e3600 	.word	0x016e3600
 8002a04:	00f42400 	.word	0x00f42400

08002a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a10:	2300      	movs	r3, #0
 8002a12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a14:	2300      	movs	r3, #0
 8002a16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8098 	beq.w	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b43      	ldr	r3, [pc, #268]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4b40      	ldr	r3, [pc, #256]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a42:	4b3d      	ldr	r3, [pc, #244]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a52:	4b3a      	ldr	r3, [pc, #232]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a39      	ldr	r2, [pc, #228]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a5e:	f7fe fc09 	bl	8001274 <HAL_GetTick>
 8002a62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a64:	e009      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a66:	f7fe fc05 	bl	8001274 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d902      	bls.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	74fb      	strb	r3, [r7, #19]
        break;
 8002a78:	e005      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a7a:	4b30      	ldr	r3, [pc, #192]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ef      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d159      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01e      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d019      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aa8:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ab2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ab4:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aba:	4a1f      	ldr	r2, [pc, #124]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aca:	4a1b      	ldr	r2, [pc, #108]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ad4:	4a18      	ldr	r2, [pc, #96]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fbc5 	bl	8001274 <HAL_GetTick>
 8002aea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aec:	e00b      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aee:	f7fe fbc1 	bl	8001274 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d902      	bls.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	74fb      	strb	r3, [r7, #19]
            break;
 8002b04:	e006      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b06:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ec      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10b      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b1a:	4b07      	ldr	r3, [pc, #28]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	4903      	ldr	r1, [pc, #12]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b30:	e008      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	74bb      	strb	r3, [r7, #18]
 8002b36:	e005      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b44:	7c7b      	ldrb	r3, [r7, #17]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d105      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4a:	4ba6      	ldr	r3, [pc, #664]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	4aa5      	ldr	r2, [pc, #660]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b62:	4ba0      	ldr	r3, [pc, #640]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b68:	f023 0203 	bic.w	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	499c      	ldr	r1, [pc, #624]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b84:	4b97      	ldr	r3, [pc, #604]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8a:	f023 020c 	bic.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	4994      	ldr	r1, [pc, #592]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ba6:	4b8f      	ldr	r3, [pc, #572]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	498b      	ldr	r1, [pc, #556]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bc8:	4b86      	ldr	r3, [pc, #536]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	4983      	ldr	r1, [pc, #524]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bea:	4b7e      	ldr	r3, [pc, #504]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	497a      	ldr	r1, [pc, #488]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c0c:	4b75      	ldr	r3, [pc, #468]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c12:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	4972      	ldr	r1, [pc, #456]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c34:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	4969      	ldr	r1, [pc, #420]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c50:	4b64      	ldr	r3, [pc, #400]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c56:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4961      	ldr	r1, [pc, #388]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c72:	4b5c      	ldr	r3, [pc, #368]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	4958      	ldr	r1, [pc, #352]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d015      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c94:	4b53      	ldr	r3, [pc, #332]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	4950      	ldr	r1, [pc, #320]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cbe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d015      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ccc:	4b45      	ldr	r3, [pc, #276]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	4942      	ldr	r1, [pc, #264]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cea:	d105      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cec:	4b3d      	ldr	r3, [pc, #244]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a3c      	ldr	r2, [pc, #240]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cf6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d015      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d04:	4b37      	ldr	r3, [pc, #220]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	4934      	ldr	r1, [pc, #208]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d22:	d105      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d24:	4b2f      	ldr	r3, [pc, #188]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a2e      	ldr	r2, [pc, #184]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d015      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d3c:	4b29      	ldr	r3, [pc, #164]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4a:	4926      	ldr	r1, [pc, #152]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d5c:	4b21      	ldr	r3, [pc, #132]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a20      	ldr	r2, [pc, #128]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d015      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d74:	4b1b      	ldr	r3, [pc, #108]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d82:	4918      	ldr	r1, [pc, #96]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d92:	d105      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d94:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d015      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002dac:	4b0d      	ldr	r3, [pc, #52]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dba:	490a      	ldr	r1, [pc, #40]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dcc:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a04      	ldr	r2, [pc, #16]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002dd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e042      	b.n	8002e80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d106      	bne.n	8002e12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fd fe77 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2224      	movs	r2, #36	@ 0x24
 8002e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 ff44 	bl	8003cc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fc75 	bl	8003728 <UART_SetConfig>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e01b      	b.n	8002e80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 ffc3 	bl	8003e04 <UART_CheckIdleState>
 8002e7e:	4603      	mov	r3, r0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d17b      	bne.n	8002f9a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_UART_Transmit+0x26>
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e074      	b.n	8002f9c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2221      	movs	r2, #33	@ 0x21
 8002ebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ec2:	f7fe f9d7 	bl	8001274 <HAL_GetTick>
 8002ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	88fa      	ldrh	r2, [r7, #6]
 8002ecc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ee0:	d108      	bne.n	8002ef4 <HAL_UART_Transmit+0x6c>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d104      	bne.n	8002ef4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	e003      	b.n	8002efc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002efc:	e030      	b.n	8002f60 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2200      	movs	r2, #0
 8002f06:	2180      	movs	r1, #128	@ 0x80
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f001 f825 	bl	8003f58 <UART_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e03d      	b.n	8002f9c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	3302      	adds	r3, #2
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	e007      	b.n	8002f4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1c8      	bne.n	8002efe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2200      	movs	r2, #0
 8002f74:	2140      	movs	r1, #64	@ 0x40
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 ffee 	bl	8003f58 <UART_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e006      	b.n	8002f9c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	@ 0x28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d137      	bne.n	800302c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_UART_Receive_DMA+0x24>
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e030      	b.n	800302e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a18      	ldr	r2, [pc, #96]	@ (8003038 <HAL_UART_Receive_DMA+0x94>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d01f      	beq.n	800301c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d018      	beq.n	800301c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	e853 3f00 	ldrex	r3, [r3]
 8002ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	623b      	str	r3, [r7, #32]
 800300a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	69f9      	ldr	r1, [r7, #28]
 800300e:	6a3a      	ldr	r2, [r7, #32]
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	61bb      	str	r3, [r7, #24]
   return(result);
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e6      	bne.n	8002fea <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	461a      	mov	r2, r3
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f001 f806 	bl	8004034 <UART_Start_Receive_DMA>
 8003028:	4603      	mov	r3, r0
 800302a:	e000      	b.n	800302e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3728      	adds	r7, #40	@ 0x28
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40008000 	.word	0x40008000

0800303c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b0ba      	sub	sp, #232	@ 0xe8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003062:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003066:	f640 030f 	movw	r3, #2063	@ 0x80f
 800306a:	4013      	ands	r3, r2
 800306c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11b      	bne.n	80030b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d015      	beq.n	80030b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d105      	bne.n	800309c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8300 	beq.w	80036a6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
      }
      return;
 80030ae:	e2fa      	b.n	80036a6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8123 	beq.w	8003300 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80030ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80030be:	4b8d      	ldr	r3, [pc, #564]	@ (80032f4 <HAL_UART_IRQHandler+0x2b8>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80030c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80030ca:	4b8b      	ldr	r3, [pc, #556]	@ (80032f8 <HAL_UART_IRQHandler+0x2bc>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8116 	beq.w	8003300 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d011      	beq.n	8003104 <HAL_UART_IRQHandler+0xc8>
 80030e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2201      	movs	r2, #1
 80030f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fa:	f043 0201 	orr.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d011      	beq.n	8003134 <HAL_UART_IRQHandler+0xf8>
 8003110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2202      	movs	r2, #2
 8003122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	f043 0204 	orr.w	r2, r3, #4
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d011      	beq.n	8003164 <HAL_UART_IRQHandler+0x128>
 8003140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2204      	movs	r2, #4
 8003152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	f043 0202 	orr.w	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d017      	beq.n	80031a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d105      	bne.n	8003188 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800317c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003180:	4b5c      	ldr	r3, [pc, #368]	@ (80032f4 <HAL_UART_IRQHandler+0x2b8>)
 8003182:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2208      	movs	r2, #8
 800318e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003196:	f043 0208 	orr.w	r2, r3, #8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d012      	beq.n	80031d2 <HAL_UART_IRQHandler+0x196>
 80031ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00c      	beq.n	80031d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8266 	beq.w	80036aa <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d013      	beq.n	8003212 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80031f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003218:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003226:	2b40      	cmp	r3, #64	@ 0x40
 8003228:	d005      	beq.n	8003236 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800322a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800322e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003232:	2b00      	cmp	r3, #0
 8003234:	d054      	beq.n	80032e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 ffe3 	bl	8004202 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003246:	2b40      	cmp	r3, #64	@ 0x40
 8003248:	d146      	bne.n	80032d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3308      	adds	r3, #8
 8003250:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003254:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003258:	e853 3f00 	ldrex	r3, [r3]
 800325c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003268:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3308      	adds	r3, #8
 8003272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003276:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800327a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003286:	e841 2300 	strex	r3, r2, [r1]
 800328a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800328e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1d9      	bne.n	800324a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800329c:	2b00      	cmp	r3, #0
 800329e:	d017      	beq.n	80032d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032a6:	4a15      	ldr	r2, [pc, #84]	@ (80032fc <HAL_UART_IRQHandler+0x2c0>)
 80032a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe fa77 	bl	80017a4 <HAL_DMA_Abort_IT>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d019      	beq.n	80032f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80032ca:	4610      	mov	r0, r2
 80032cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ce:	e00f      	b.n	80032f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fa13 	bl	80036fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d6:	e00b      	b.n	80032f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fa0f 	bl	80036fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032de:	e007      	b.n	80032f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fa0b 	bl	80036fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80032ee:	e1dc      	b.n	80036aa <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	bf00      	nop
    return;
 80032f2:	e1da      	b.n	80036aa <HAL_UART_IRQHandler+0x66e>
 80032f4:	10000001 	.word	0x10000001
 80032f8:	04000120 	.word	0x04000120
 80032fc:	080044b9 	.word	0x080044b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003304:	2b01      	cmp	r3, #1
 8003306:	f040 8170 	bne.w	80035ea <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800330a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8169 	beq.w	80035ea <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8162 	beq.w	80035ea <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2210      	movs	r2, #16
 800332c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003338:	2b40      	cmp	r3, #64	@ 0x40
 800333a:	f040 80d8 	bne.w	80034ee <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800334c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80af 	beq.w	80034b4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800335c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003360:	429a      	cmp	r2, r3
 8003362:	f080 80a7 	bcs.w	80034b4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800336c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 8087 	bne.w	8003492 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003398:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800339c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1da      	bne.n	8003384 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3308      	adds	r3, #8
 80033d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3308      	adds	r3, #8
 80033ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003404:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e1      	bne.n	80033ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3308      	adds	r3, #8
 8003410:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003412:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800341a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800341c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3308      	adds	r3, #8
 800342a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800342e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003430:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003432:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003434:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003436:	e841 2300 	strex	r3, r2, [r1]
 800343a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800343c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e3      	bne.n	800340a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800345e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003460:	f023 0310 	bic.w	r3, r3, #16
 8003464:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003472:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003474:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003478:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e4      	bne.n	8003450 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe f930 	bl	80016f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f92f 	bl	8003710 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80034b2:	e0fc      	b.n	80036ae <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80034ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034be:	429a      	cmp	r2, r3
 80034c0:	f040 80f5 	bne.w	80036ae <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	f040 80eb 	bne.w	80036ae <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f912 	bl	8003710 <HAL_UARTEx_RxEventCallback>
      return;
 80034ec:	e0df      	b.n	80036ae <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80d1 	beq.w	80036b2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80cc 	beq.w	80036b2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800352e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800353c:	647b      	str	r3, [r7, #68]	@ 0x44
 800353e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800354a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e4      	bne.n	800351a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3308      	adds	r3, #8
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	623b      	str	r3, [r7, #32]
   return(result);
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3308      	adds	r3, #8
 8003574:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003578:	633a      	str	r2, [r7, #48]	@ 0x30
 800357a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800357e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e1      	bne.n	8003550 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f023 0310 	bic.w	r3, r3, #16
 80035b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	69b9      	ldr	r1, [r7, #24]
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	617b      	str	r3, [r7, #20]
   return(result);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e4      	bne.n	80035a0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2202      	movs	r2, #2
 80035da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f894 	bl	8003710 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035e8:	e063      	b.n	80036b2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00e      	beq.n	8003614 <HAL_UART_IRQHandler+0x5d8>
 80035f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d008      	beq.n	8003614 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800360a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 ff90 	bl	8004532 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003612:	e051      	b.n	80036b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361c:	2b00      	cmp	r3, #0
 800361e:	d014      	beq.n	800364a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800362c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003630:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800363c:	2b00      	cmp	r3, #0
 800363e:	d03a      	beq.n	80036b6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
    }
    return;
 8003648:	e035      	b.n	80036b6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_UART_IRQHandler+0x62e>
 8003656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800365a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 ff3a 	bl	80044dc <UART_EndTransmit_IT>
    return;
 8003668:	e026      	b.n	80036b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800366a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800366e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_UART_IRQHandler+0x64e>
 8003676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 ff69 	bl	800455a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003688:	e016      	b.n	80036b8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800368e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d010      	beq.n	80036b8 <HAL_UART_IRQHandler+0x67c>
 8003696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369a:	2b00      	cmp	r3, #0
 800369c:	da0c      	bge.n	80036b8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 ff51 	bl	8004546 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036a4:	e008      	b.n	80036b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80036a6:	bf00      	nop
 80036a8:	e006      	b.n	80036b8 <HAL_UART_IRQHandler+0x67c>
    return;
 80036aa:	bf00      	nop
 80036ac:	e004      	b.n	80036b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <HAL_UART_IRQHandler+0x67c>
      return;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <HAL_UART_IRQHandler+0x67c>
    return;
 80036b6:	bf00      	nop
  }
}
 80036b8:	37e8      	adds	r7, #232	@ 0xe8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop

080036c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800372c:	b08c      	sub	sp, #48	@ 0x30
 800372e:	af00      	add	r7, sp, #0
 8003730:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	431a      	orrs	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	431a      	orrs	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	4313      	orrs	r3, r2
 800374e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4bab      	ldr	r3, [pc, #684]	@ (8003a04 <UART_SetConfig+0x2dc>)
 8003758:	4013      	ands	r3, r2
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003760:	430b      	orrs	r3, r1
 8003762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4aa0      	ldr	r2, [pc, #640]	@ (8003a08 <UART_SetConfig+0x2e0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003790:	4313      	orrs	r3, r2
 8003792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800379e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b2:	f023 010f 	bic.w	r1, r3, #15
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a91      	ldr	r2, [pc, #580]	@ (8003a0c <UART_SetConfig+0x2e4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d125      	bne.n	8003818 <UART_SetConfig+0xf0>
 80037cc:	4b90      	ldr	r3, [pc, #576]	@ (8003a10 <UART_SetConfig+0x2e8>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d81a      	bhi.n	8003810 <UART_SetConfig+0xe8>
 80037da:	a201      	add	r2, pc, #4	@ (adr r2, 80037e0 <UART_SetConfig+0xb8>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	08003801 	.word	0x08003801
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	08003809 	.word	0x08003809
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037f6:	e0d6      	b.n	80039a6 <UART_SetConfig+0x27e>
 80037f8:	2302      	movs	r3, #2
 80037fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037fe:	e0d2      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003800:	2304      	movs	r3, #4
 8003802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003806:	e0ce      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003808:	2308      	movs	r3, #8
 800380a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800380e:	e0ca      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003810:	2310      	movs	r3, #16
 8003812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003816:	e0c6      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a7d      	ldr	r2, [pc, #500]	@ (8003a14 <UART_SetConfig+0x2ec>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d138      	bne.n	8003894 <UART_SetConfig+0x16c>
 8003822:	4b7b      	ldr	r3, [pc, #492]	@ (8003a10 <UART_SetConfig+0x2e8>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b0c      	cmp	r3, #12
 800382e:	d82d      	bhi.n	800388c <UART_SetConfig+0x164>
 8003830:	a201      	add	r2, pc, #4	@ (adr r2, 8003838 <UART_SetConfig+0x110>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	0800386d 	.word	0x0800386d
 800383c:	0800388d 	.word	0x0800388d
 8003840:	0800388d 	.word	0x0800388d
 8003844:	0800388d 	.word	0x0800388d
 8003848:	0800387d 	.word	0x0800387d
 800384c:	0800388d 	.word	0x0800388d
 8003850:	0800388d 	.word	0x0800388d
 8003854:	0800388d 	.word	0x0800388d
 8003858:	08003875 	.word	0x08003875
 800385c:	0800388d 	.word	0x0800388d
 8003860:	0800388d 	.word	0x0800388d
 8003864:	0800388d 	.word	0x0800388d
 8003868:	08003885 	.word	0x08003885
 800386c:	2300      	movs	r3, #0
 800386e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003872:	e098      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003874:	2302      	movs	r3, #2
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387a:	e094      	b.n	80039a6 <UART_SetConfig+0x27e>
 800387c:	2304      	movs	r3, #4
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003882:	e090      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003884:	2308      	movs	r3, #8
 8003886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800388a:	e08c      	b.n	80039a6 <UART_SetConfig+0x27e>
 800388c:	2310      	movs	r3, #16
 800388e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003892:	e088      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a5f      	ldr	r2, [pc, #380]	@ (8003a18 <UART_SetConfig+0x2f0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d125      	bne.n	80038ea <UART_SetConfig+0x1c2>
 800389e:	4b5c      	ldr	r3, [pc, #368]	@ (8003a10 <UART_SetConfig+0x2e8>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80038a8:	2b30      	cmp	r3, #48	@ 0x30
 80038aa:	d016      	beq.n	80038da <UART_SetConfig+0x1b2>
 80038ac:	2b30      	cmp	r3, #48	@ 0x30
 80038ae:	d818      	bhi.n	80038e2 <UART_SetConfig+0x1ba>
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d00a      	beq.n	80038ca <UART_SetConfig+0x1a2>
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d814      	bhi.n	80038e2 <UART_SetConfig+0x1ba>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <UART_SetConfig+0x19a>
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d008      	beq.n	80038d2 <UART_SetConfig+0x1aa>
 80038c0:	e00f      	b.n	80038e2 <UART_SetConfig+0x1ba>
 80038c2:	2300      	movs	r3, #0
 80038c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038c8:	e06d      	b.n	80039a6 <UART_SetConfig+0x27e>
 80038ca:	2302      	movs	r3, #2
 80038cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d0:	e069      	b.n	80039a6 <UART_SetConfig+0x27e>
 80038d2:	2304      	movs	r3, #4
 80038d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d8:	e065      	b.n	80039a6 <UART_SetConfig+0x27e>
 80038da:	2308      	movs	r3, #8
 80038dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e0:	e061      	b.n	80039a6 <UART_SetConfig+0x27e>
 80038e2:	2310      	movs	r3, #16
 80038e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e8:	e05d      	b.n	80039a6 <UART_SetConfig+0x27e>
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a4b      	ldr	r2, [pc, #300]	@ (8003a1c <UART_SetConfig+0x2f4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d125      	bne.n	8003940 <UART_SetConfig+0x218>
 80038f4:	4b46      	ldr	r3, [pc, #280]	@ (8003a10 <UART_SetConfig+0x2e8>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003900:	d016      	beq.n	8003930 <UART_SetConfig+0x208>
 8003902:	2bc0      	cmp	r3, #192	@ 0xc0
 8003904:	d818      	bhi.n	8003938 <UART_SetConfig+0x210>
 8003906:	2b80      	cmp	r3, #128	@ 0x80
 8003908:	d00a      	beq.n	8003920 <UART_SetConfig+0x1f8>
 800390a:	2b80      	cmp	r3, #128	@ 0x80
 800390c:	d814      	bhi.n	8003938 <UART_SetConfig+0x210>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <UART_SetConfig+0x1f0>
 8003912:	2b40      	cmp	r3, #64	@ 0x40
 8003914:	d008      	beq.n	8003928 <UART_SetConfig+0x200>
 8003916:	e00f      	b.n	8003938 <UART_SetConfig+0x210>
 8003918:	2300      	movs	r3, #0
 800391a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800391e:	e042      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003920:	2302      	movs	r3, #2
 8003922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003926:	e03e      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003928:	2304      	movs	r3, #4
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800392e:	e03a      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003930:	2308      	movs	r3, #8
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003936:	e036      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003938:	2310      	movs	r3, #16
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800393e:	e032      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a30      	ldr	r2, [pc, #192]	@ (8003a08 <UART_SetConfig+0x2e0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d12a      	bne.n	80039a0 <UART_SetConfig+0x278>
 800394a:	4b31      	ldr	r3, [pc, #196]	@ (8003a10 <UART_SetConfig+0x2e8>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003950:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003954:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003958:	d01a      	beq.n	8003990 <UART_SetConfig+0x268>
 800395a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800395e:	d81b      	bhi.n	8003998 <UART_SetConfig+0x270>
 8003960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003964:	d00c      	beq.n	8003980 <UART_SetConfig+0x258>
 8003966:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800396a:	d815      	bhi.n	8003998 <UART_SetConfig+0x270>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <UART_SetConfig+0x250>
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003974:	d008      	beq.n	8003988 <UART_SetConfig+0x260>
 8003976:	e00f      	b.n	8003998 <UART_SetConfig+0x270>
 8003978:	2300      	movs	r3, #0
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800397e:	e012      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003980:	2302      	movs	r3, #2
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003986:	e00e      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003988:	2304      	movs	r3, #4
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800398e:	e00a      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003990:	2308      	movs	r3, #8
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003996:	e006      	b.n	80039a6 <UART_SetConfig+0x27e>
 8003998:	2310      	movs	r3, #16
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800399e:	e002      	b.n	80039a6 <UART_SetConfig+0x27e>
 80039a0:	2310      	movs	r3, #16
 80039a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a17      	ldr	r2, [pc, #92]	@ (8003a08 <UART_SetConfig+0x2e0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	f040 80a8 	bne.w	8003b02 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d834      	bhi.n	8003a24 <UART_SetConfig+0x2fc>
 80039ba:	a201      	add	r2, pc, #4	@ (adr r2, 80039c0 <UART_SetConfig+0x298>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039e5 	.word	0x080039e5
 80039c4:	08003a25 	.word	0x08003a25
 80039c8:	080039ed 	.word	0x080039ed
 80039cc:	08003a25 	.word	0x08003a25
 80039d0:	080039f3 	.word	0x080039f3
 80039d4:	08003a25 	.word	0x08003a25
 80039d8:	08003a25 	.word	0x08003a25
 80039dc:	08003a25 	.word	0x08003a25
 80039e0:	080039fb 	.word	0x080039fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e4:	f7fe ff9e 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 80039e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039ea:	e021      	b.n	8003a30 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003a20 <UART_SetConfig+0x2f8>)
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039f0:	e01e      	b.n	8003a30 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f2:	f7fe ff29 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 80039f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039f8:	e01a      	b.n	8003a30 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a00:	e016      	b.n	8003a30 <UART_SetConfig+0x308>
 8003a02:	bf00      	nop
 8003a04:	cfff69f3 	.word	0xcfff69f3
 8003a08:	40008000 	.word	0x40008000
 8003a0c:	40013800 	.word	0x40013800
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40004400 	.word	0x40004400
 8003a18:	40004800 	.word	0x40004800
 8003a1c:	40004c00 	.word	0x40004c00
 8003a20:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 812a 	beq.w	8003c8c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	4a9e      	ldr	r2, [pc, #632]	@ (8003cb8 <UART_SetConfig+0x590>)
 8003a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a42:	461a      	mov	r2, r3
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	4413      	add	r3, r2
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d305      	bcc.n	8003a68 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d903      	bls.n	8003a70 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a6e:	e10d      	b.n	8003c8c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	2200      	movs	r2, #0
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	60fa      	str	r2, [r7, #12]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	4a8e      	ldr	r2, [pc, #568]	@ (8003cb8 <UART_SetConfig+0x590>)
 8003a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2200      	movs	r2, #0
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a92:	f7fc fc1d 	bl	80002d0 <__aeabi_uldivmod>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	020b      	lsls	r3, r1, #8
 8003aa8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003aac:	0202      	lsls	r2, r0, #8
 8003aae:	6979      	ldr	r1, [r7, #20]
 8003ab0:	6849      	ldr	r1, [r1, #4]
 8003ab2:	0849      	lsrs	r1, r1, #1
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	4605      	mov	r5, r0
 8003aba:	eb12 0804 	adds.w	r8, r2, r4
 8003abe:	eb43 0905 	adc.w	r9, r3, r5
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	469a      	mov	sl, r3
 8003aca:	4693      	mov	fp, r2
 8003acc:	4652      	mov	r2, sl
 8003ace:	465b      	mov	r3, fp
 8003ad0:	4640      	mov	r0, r8
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	f7fc fbfc 	bl	80002d0 <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4613      	mov	r3, r2
 8003ade:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ae6:	d308      	bcc.n	8003afa <UART_SetConfig+0x3d2>
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aee:	d204      	bcs.n	8003afa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6a3a      	ldr	r2, [r7, #32]
 8003af6:	60da      	str	r2, [r3, #12]
 8003af8:	e0c8      	b.n	8003c8c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b00:	e0c4      	b.n	8003c8c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b0a:	d167      	bne.n	8003bdc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003b0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d828      	bhi.n	8003b66 <UART_SetConfig+0x43e>
 8003b14:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <UART_SetConfig+0x3f4>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003b49 	.word	0x08003b49
 8003b24:	08003b51 	.word	0x08003b51
 8003b28:	08003b67 	.word	0x08003b67
 8003b2c:	08003b57 	.word	0x08003b57
 8003b30:	08003b67 	.word	0x08003b67
 8003b34:	08003b67 	.word	0x08003b67
 8003b38:	08003b67 	.word	0x08003b67
 8003b3c:	08003b5f 	.word	0x08003b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b40:	f7fe fef0 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8003b44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b46:	e014      	b.n	8003b72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b48:	f7fe ff02 	bl	8002950 <HAL_RCC_GetPCLK2Freq>
 8003b4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b4e:	e010      	b.n	8003b72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b50:	4b5a      	ldr	r3, [pc, #360]	@ (8003cbc <UART_SetConfig+0x594>)
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b54:	e00d      	b.n	8003b72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b56:	f7fe fe77 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8003b5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b5c:	e009      	b.n	8003b72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b64:	e005      	b.n	8003b72 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8089 	beq.w	8003c8c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	4a4e      	ldr	r2, [pc, #312]	@ (8003cb8 <UART_SetConfig+0x590>)
 8003b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b84:	461a      	mov	r2, r3
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b8c:	005a      	lsls	r2, r3, #1
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	441a      	add	r2, r3
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	2b0f      	cmp	r3, #15
 8003ba4:	d916      	bls.n	8003bd4 <UART_SetConfig+0x4ac>
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bac:	d212      	bcs.n	8003bd4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	f023 030f 	bic.w	r3, r3, #15
 8003bb6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	085b      	lsrs	r3, r3, #1
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	8bfb      	ldrh	r3, [r7, #30]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	8bfa      	ldrh	r2, [r7, #30]
 8003bd0:	60da      	str	r2, [r3, #12]
 8003bd2:	e05b      	b.n	8003c8c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003bda:	e057      	b.n	8003c8c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bdc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d828      	bhi.n	8003c36 <UART_SetConfig+0x50e>
 8003be4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bec <UART_SetConfig+0x4c4>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003c37 	.word	0x08003c37
 8003bfc:	08003c27 	.word	0x08003c27
 8003c00:	08003c37 	.word	0x08003c37
 8003c04:	08003c37 	.word	0x08003c37
 8003c08:	08003c37 	.word	0x08003c37
 8003c0c:	08003c2f 	.word	0x08003c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c10:	f7fe fe88 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8003c14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c16:	e014      	b.n	8003c42 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c18:	f7fe fe9a 	bl	8002950 <HAL_RCC_GetPCLK2Freq>
 8003c1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c1e:	e010      	b.n	8003c42 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c20:	4b26      	ldr	r3, [pc, #152]	@ (8003cbc <UART_SetConfig+0x594>)
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c24:	e00d      	b.n	8003c42 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c26:	f7fe fe0f 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8003c2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c2c:	e009      	b.n	8003c42 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c34:	e005      	b.n	8003c42 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c40:	bf00      	nop
    }

    if (pclk != 0U)
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d021      	beq.n	8003c8c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb8 <UART_SetConfig+0x590>)
 8003c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	441a      	add	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	2b0f      	cmp	r3, #15
 8003c70:	d909      	bls.n	8003c86 <UART_SetConfig+0x55e>
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d205      	bcs.n	8003c86 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60da      	str	r2, [r3, #12]
 8003c84:	e002      	b.n	8003c8c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003ca8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3730      	adds	r7, #48	@ 0x30
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cb6:	bf00      	nop
 8003cb8:	08005274 	.word	0x08005274
 8003cbc:	00f42400 	.word	0x00f42400

08003cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01a      	beq.n	8003dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dbe:	d10a      	bne.n	8003dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
  }
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b098      	sub	sp, #96	@ 0x60
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e14:	f7fd fa2e 	bl	8001274 <HAL_GetTick>
 8003e18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d12f      	bne.n	8003e88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e30:	2200      	movs	r2, #0
 8003e32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f88e 	bl	8003f58 <UART_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d022      	beq.n	8003e88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e6      	bne.n	8003e42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e063      	b.n	8003f50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d149      	bne.n	8003f2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f857 	bl	8003f58 <UART_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d03c      	beq.n	8003f2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ece:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e6      	bne.n	8003eb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f02:	61fa      	str	r2, [r7, #28]
 8003f04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	617b      	str	r3, [r7, #20]
   return(result);
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e5      	bne.n	8003ee2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e012      	b.n	8003f50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3758      	adds	r7, #88	@ 0x58
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f68:	e04f      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f70:	d04b      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f72:	f7fd f97f 	bl	8001274 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e04e      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d037      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b80      	cmp	r3, #128	@ 0x80
 8003f9e:	d034      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b40      	cmp	r3, #64	@ 0x40
 8003fa4:	d031      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d110      	bne.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f920 	bl	8004202 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e029      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fe4:	d111      	bne.n	800400a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f906 	bl	8004202 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e00f      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4013      	ands	r3, r2
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	429a      	cmp	r2, r3
 8004026:	d0a0      	beq.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b096      	sub	sp, #88	@ 0x58
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2222      	movs	r2, #34	@ 0x22
 800405c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d02d      	beq.n	80040c6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004070:	4a40      	ldr	r2, [pc, #256]	@ (8004174 <UART_Start_Receive_DMA+0x140>)
 8004072:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800407a:	4a3f      	ldr	r2, [pc, #252]	@ (8004178 <UART_Start_Receive_DMA+0x144>)
 800407c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004084:	4a3d      	ldr	r2, [pc, #244]	@ (800417c <UART_Start_Receive_DMA+0x148>)
 8004086:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800408e:	2200      	movs	r2, #0
 8004090:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3324      	adds	r3, #36	@ 0x24
 800409e:	4619      	mov	r1, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a4:	461a      	mov	r2, r3
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	f7fd faa8 	bl	80015fc <HAL_DMA_Start_IT>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2210      	movs	r2, #16
 80040b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e051      	b.n	800416a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d018      	beq.n	8004100 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ee:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80040f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80040fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e6      	bne.n	80040ce <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3308      	adds	r3, #8
 8004106:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	653b      	str	r3, [r7, #80]	@ 0x50
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3308      	adds	r3, #8
 800411e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004120:	637a      	str	r2, [r7, #52]	@ 0x34
 8004122:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004126:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800412e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e5      	bne.n	8004100 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3308      	adds	r3, #8
 800413a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	613b      	str	r3, [r7, #16]
   return(result);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800414a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3308      	adds	r3, #8
 8004152:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004154:	623a      	str	r2, [r7, #32]
 8004156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	69f9      	ldr	r1, [r7, #28]
 800415a:	6a3a      	ldr	r2, [r7, #32]
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	61bb      	str	r3, [r7, #24]
   return(result);
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e5      	bne.n	8004134 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3758      	adds	r7, #88	@ 0x58
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	080042cf 	.word	0x080042cf
 8004178:	080043fb 	.word	0x080043fb
 800417c:	08004439 	.word	0x08004439

08004180 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b08f      	sub	sp, #60	@ 0x3c
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	61fb      	str	r3, [r7, #28]
   return(result);
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800419c:	637b      	str	r3, [r7, #52]	@ 0x34
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041a8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e6      	bne.n	8004188 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80041d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041da:	61ba      	str	r2, [r7, #24]
 80041dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6979      	ldr	r1, [r7, #20]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	613b      	str	r3, [r7, #16]
   return(result);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e5      	bne.n	80041ba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80041f6:	bf00      	nop
 80041f8:	373c      	adds	r7, #60	@ 0x3c
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004202:	b480      	push	{r7}
 8004204:	b095      	sub	sp, #84	@ 0x54
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800421e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004228:	643b      	str	r3, [r7, #64]	@ 0x40
 800422a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800422e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e6      	bne.n	800420a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3308      	adds	r3, #8
 8004242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	61fb      	str	r3, [r7, #28]
   return(result);
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3308      	adds	r3, #8
 800425e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004260:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e3      	bne.n	800423c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d118      	bne.n	80042ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	60bb      	str	r3, [r7, #8]
   return(result);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f023 0310 	bic.w	r3, r3, #16
 8004290:	647b      	str	r3, [r7, #68]	@ 0x44
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6979      	ldr	r1, [r7, #20]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	613b      	str	r3, [r7, #16]
   return(result);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e6      	bne.n	800427c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042c2:	bf00      	nop
 80042c4:	3754      	adds	r7, #84	@ 0x54
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b09c      	sub	sp, #112	@ 0x70
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d171      	bne.n	80043ce <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80042ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ec:	2200      	movs	r2, #0
 80042ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004300:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004302:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004306:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004310:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004312:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004316:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800431e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e6      	bne.n	80042f2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3308      	adds	r3, #8
 800432a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004336:	f023 0301 	bic.w	r3, r3, #1
 800433a:	667b      	str	r3, [r7, #100]	@ 0x64
 800433c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004344:	647a      	str	r2, [r7, #68]	@ 0x44
 8004346:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800434a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e5      	bne.n	8004324 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3308      	adds	r3, #8
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	623b      	str	r3, [r7, #32]
   return(result);
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800436e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3308      	adds	r3, #8
 8004376:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004378:	633a      	str	r2, [r7, #48]	@ 0x30
 800437a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800437e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e5      	bne.n	8004358 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800438c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800438e:	2220      	movs	r2, #32
 8004390:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d118      	bne.n	80043ce <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f023 0310 	bic.w	r3, r3, #16
 80043b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	69b9      	ldr	r1, [r7, #24]
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	617b      	str	r3, [r7, #20]
   return(result);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e6      	bne.n	800439c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d0:	2200      	movs	r2, #0
 80043d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d107      	bne.n	80043ec <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043e2:	4619      	mov	r1, r3
 80043e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80043e6:	f7ff f993 	bl	8003710 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043ea:	e002      	b.n	80043f2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80043ec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80043ee:	f7ff f971 	bl	80036d4 <HAL_UART_RxCpltCallback>
}
 80043f2:	bf00      	nop
 80043f4:	3770      	adds	r7, #112	@ 0x70
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004406:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004412:	2b01      	cmp	r3, #1
 8004414:	d109      	bne.n	800442a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	b29b      	uxth	r3, r3
 8004420:	4619      	mov	r1, r3
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7ff f974 	bl	8003710 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004428:	e002      	b.n	8004430 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f7ff f95c 	bl	80036e8 <HAL_UART_RxHalfCpltCallback>
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004444:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004454:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004460:	2b80      	cmp	r3, #128	@ 0x80
 8004462:	d109      	bne.n	8004478 <UART_DMAError+0x40>
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b21      	cmp	r3, #33	@ 0x21
 8004468:	d106      	bne.n	8004478 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8004472:	6978      	ldr	r0, [r7, #20]
 8004474:	f7ff fe84 	bl	8004180 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004482:	2b40      	cmp	r3, #64	@ 0x40
 8004484:	d109      	bne.n	800449a <UART_DMAError+0x62>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b22      	cmp	r3, #34	@ 0x22
 800448a:	d106      	bne.n	800449a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2200      	movs	r2, #0
 8004490:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8004494:	6978      	ldr	r0, [r7, #20]
 8004496:	f7ff feb4 	bl	8004202 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a0:	f043 0210 	orr.w	r2, r3, #16
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044aa:	6978      	ldr	r0, [r7, #20]
 80044ac:	f7ff f926 	bl	80036fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044b0:	bf00      	nop
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff f914 	bl	80036fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6979      	ldr	r1, [r7, #20]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	613b      	str	r3, [r7, #16]
   return(result);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e6      	bne.n	80044e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff f8cb 	bl	80036c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800452a:	bf00      	nop
 800452c:	3720      	adds	r7, #32
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_UARTEx_DisableFifoMode+0x16>
 8004580:	2302      	movs	r3, #2
 8004582:	e027      	b.n	80045d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2224      	movs	r2, #36	@ 0x24
 8004590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80045b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e02d      	b.n	8004654 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2224      	movs	r2, #36	@ 0x24
 8004604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f84f 	bl	80046d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004670:	2302      	movs	r3, #2
 8004672:	e02d      	b.n	80046d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	@ 0x24
 8004680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f811 	bl	80046d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d108      	bne.n	80046fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046f8:	e031      	b.n	800475e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046fa:	2308      	movs	r3, #8
 80046fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046fe:	2308      	movs	r3, #8
 8004700:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	0e5b      	lsrs	r3, r3, #25
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	0f5b      	lsrs	r3, r3, #29
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004722:	7bbb      	ldrb	r3, [r7, #14]
 8004724:	7b3a      	ldrb	r2, [r7, #12]
 8004726:	4911      	ldr	r1, [pc, #68]	@ (800476c <UARTEx_SetNbDataToProcess+0x94>)
 8004728:	5c8a      	ldrb	r2, [r1, r2]
 800472a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800472e:	7b3a      	ldrb	r2, [r7, #12]
 8004730:	490f      	ldr	r1, [pc, #60]	@ (8004770 <UARTEx_SetNbDataToProcess+0x98>)
 8004732:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004734:	fb93 f3f2 	sdiv	r3, r3, r2
 8004738:	b29a      	uxth	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	7b7a      	ldrb	r2, [r7, #13]
 8004744:	4909      	ldr	r1, [pc, #36]	@ (800476c <UARTEx_SetNbDataToProcess+0x94>)
 8004746:	5c8a      	ldrb	r2, [r1, r2]
 8004748:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800474c:	7b7a      	ldrb	r2, [r7, #13]
 800474e:	4908      	ldr	r1, [pc, #32]	@ (8004770 <UARTEx_SetNbDataToProcess+0x98>)
 8004750:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004752:	fb93 f3f2 	sdiv	r3, r3, r2
 8004756:	b29a      	uxth	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	0800528c 	.word	0x0800528c
 8004770:	08005294 	.word	0x08005294

08004774 <sniprintf>:
 8004774:	b40c      	push	{r2, r3}
 8004776:	b530      	push	{r4, r5, lr}
 8004778:	4b18      	ldr	r3, [pc, #96]	@ (80047dc <sniprintf+0x68>)
 800477a:	1e0c      	subs	r4, r1, #0
 800477c:	681d      	ldr	r5, [r3, #0]
 800477e:	b09d      	sub	sp, #116	@ 0x74
 8004780:	da08      	bge.n	8004794 <sniprintf+0x20>
 8004782:	238b      	movs	r3, #139	@ 0x8b
 8004784:	602b      	str	r3, [r5, #0]
 8004786:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800478a:	b01d      	add	sp, #116	@ 0x74
 800478c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004790:	b002      	add	sp, #8
 8004792:	4770      	bx	lr
 8004794:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004798:	f8ad 3014 	strh.w	r3, [sp, #20]
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80047a2:	bf14      	ite	ne
 80047a4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80047a8:	4623      	moveq	r3, r4
 80047aa:	9304      	str	r3, [sp, #16]
 80047ac:	9307      	str	r3, [sp, #28]
 80047ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047b2:	9002      	str	r0, [sp, #8]
 80047b4:	9006      	str	r0, [sp, #24]
 80047b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80047ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80047bc:	ab21      	add	r3, sp, #132	@ 0x84
 80047be:	a902      	add	r1, sp, #8
 80047c0:	4628      	mov	r0, r5
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	f000 f8aa 	bl	800491c <_svfiprintf_r>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	bfbc      	itt	lt
 80047cc:	238b      	movlt	r3, #139	@ 0x8b
 80047ce:	602b      	strlt	r3, [r5, #0]
 80047d0:	2c00      	cmp	r4, #0
 80047d2:	d0da      	beq.n	800478a <sniprintf+0x16>
 80047d4:	9b02      	ldr	r3, [sp, #8]
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]
 80047da:	e7d6      	b.n	800478a <sniprintf+0x16>
 80047dc:	20000030 	.word	0x20000030

080047e0 <memset>:
 80047e0:	4402      	add	r2, r0
 80047e2:	4603      	mov	r3, r0
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d100      	bne.n	80047ea <memset+0xa>
 80047e8:	4770      	bx	lr
 80047ea:	f803 1b01 	strb.w	r1, [r3], #1
 80047ee:	e7f9      	b.n	80047e4 <memset+0x4>

080047f0 <__errno>:
 80047f0:	4b01      	ldr	r3, [pc, #4]	@ (80047f8 <__errno+0x8>)
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000030 	.word	0x20000030

080047fc <__libc_init_array>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004834 <__libc_init_array+0x38>)
 8004800:	4c0d      	ldr	r4, [pc, #52]	@ (8004838 <__libc_init_array+0x3c>)
 8004802:	1b64      	subs	r4, r4, r5
 8004804:	10a4      	asrs	r4, r4, #2
 8004806:	2600      	movs	r6, #0
 8004808:	42a6      	cmp	r6, r4
 800480a:	d109      	bne.n	8004820 <__libc_init_array+0x24>
 800480c:	4d0b      	ldr	r5, [pc, #44]	@ (800483c <__libc_init_array+0x40>)
 800480e:	4c0c      	ldr	r4, [pc, #48]	@ (8004840 <__libc_init_array+0x44>)
 8004810:	f000 fc64 	bl	80050dc <_init>
 8004814:	1b64      	subs	r4, r4, r5
 8004816:	10a4      	asrs	r4, r4, #2
 8004818:	2600      	movs	r6, #0
 800481a:	42a6      	cmp	r6, r4
 800481c:	d105      	bne.n	800482a <__libc_init_array+0x2e>
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	f855 3b04 	ldr.w	r3, [r5], #4
 8004824:	4798      	blx	r3
 8004826:	3601      	adds	r6, #1
 8004828:	e7ee      	b.n	8004808 <__libc_init_array+0xc>
 800482a:	f855 3b04 	ldr.w	r3, [r5], #4
 800482e:	4798      	blx	r3
 8004830:	3601      	adds	r6, #1
 8004832:	e7f2      	b.n	800481a <__libc_init_array+0x1e>
 8004834:	080052d8 	.word	0x080052d8
 8004838:	080052d8 	.word	0x080052d8
 800483c:	080052d8 	.word	0x080052d8
 8004840:	080052dc 	.word	0x080052dc

08004844 <__retarget_lock_acquire_recursive>:
 8004844:	4770      	bx	lr

08004846 <__retarget_lock_release_recursive>:
 8004846:	4770      	bx	lr

08004848 <memcpy>:
 8004848:	440a      	add	r2, r1
 800484a:	4291      	cmp	r1, r2
 800484c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004850:	d100      	bne.n	8004854 <memcpy+0xc>
 8004852:	4770      	bx	lr
 8004854:	b510      	push	{r4, lr}
 8004856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800485a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800485e:	4291      	cmp	r1, r2
 8004860:	d1f9      	bne.n	8004856 <memcpy+0xe>
 8004862:	bd10      	pop	{r4, pc}

08004864 <__ssputs_r>:
 8004864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004868:	688e      	ldr	r6, [r1, #8]
 800486a:	461f      	mov	r7, r3
 800486c:	42be      	cmp	r6, r7
 800486e:	680b      	ldr	r3, [r1, #0]
 8004870:	4682      	mov	sl, r0
 8004872:	460c      	mov	r4, r1
 8004874:	4690      	mov	r8, r2
 8004876:	d82d      	bhi.n	80048d4 <__ssputs_r+0x70>
 8004878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800487c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004880:	d026      	beq.n	80048d0 <__ssputs_r+0x6c>
 8004882:	6965      	ldr	r5, [r4, #20]
 8004884:	6909      	ldr	r1, [r1, #16]
 8004886:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800488a:	eba3 0901 	sub.w	r9, r3, r1
 800488e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004892:	1c7b      	adds	r3, r7, #1
 8004894:	444b      	add	r3, r9
 8004896:	106d      	asrs	r5, r5, #1
 8004898:	429d      	cmp	r5, r3
 800489a:	bf38      	it	cc
 800489c:	461d      	movcc	r5, r3
 800489e:	0553      	lsls	r3, r2, #21
 80048a0:	d527      	bpl.n	80048f2 <__ssputs_r+0x8e>
 80048a2:	4629      	mov	r1, r5
 80048a4:	f000 f958 	bl	8004b58 <_malloc_r>
 80048a8:	4606      	mov	r6, r0
 80048aa:	b360      	cbz	r0, 8004906 <__ssputs_r+0xa2>
 80048ac:	6921      	ldr	r1, [r4, #16]
 80048ae:	464a      	mov	r2, r9
 80048b0:	f7ff ffca 	bl	8004848 <memcpy>
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80048ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	6126      	str	r6, [r4, #16]
 80048c2:	6165      	str	r5, [r4, #20]
 80048c4:	444e      	add	r6, r9
 80048c6:	eba5 0509 	sub.w	r5, r5, r9
 80048ca:	6026      	str	r6, [r4, #0]
 80048cc:	60a5      	str	r5, [r4, #8]
 80048ce:	463e      	mov	r6, r7
 80048d0:	42be      	cmp	r6, r7
 80048d2:	d900      	bls.n	80048d6 <__ssputs_r+0x72>
 80048d4:	463e      	mov	r6, r7
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	4632      	mov	r2, r6
 80048da:	4641      	mov	r1, r8
 80048dc:	f000 fb82 	bl	8004fe4 <memmove>
 80048e0:	68a3      	ldr	r3, [r4, #8]
 80048e2:	1b9b      	subs	r3, r3, r6
 80048e4:	60a3      	str	r3, [r4, #8]
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	4433      	add	r3, r6
 80048ea:	6023      	str	r3, [r4, #0]
 80048ec:	2000      	movs	r0, #0
 80048ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f2:	462a      	mov	r2, r5
 80048f4:	f000 fb48 	bl	8004f88 <_realloc_r>
 80048f8:	4606      	mov	r6, r0
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d1e0      	bne.n	80048c0 <__ssputs_r+0x5c>
 80048fe:	6921      	ldr	r1, [r4, #16]
 8004900:	4650      	mov	r0, sl
 8004902:	f000 fb99 	bl	8005038 <_free_r>
 8004906:	230c      	movs	r3, #12
 8004908:	f8ca 3000 	str.w	r3, [sl]
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004918:	e7e9      	b.n	80048ee <__ssputs_r+0x8a>
	...

0800491c <_svfiprintf_r>:
 800491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004920:	4698      	mov	r8, r3
 8004922:	898b      	ldrh	r3, [r1, #12]
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	b09d      	sub	sp, #116	@ 0x74
 8004928:	4607      	mov	r7, r0
 800492a:	460d      	mov	r5, r1
 800492c:	4614      	mov	r4, r2
 800492e:	d510      	bpl.n	8004952 <_svfiprintf_r+0x36>
 8004930:	690b      	ldr	r3, [r1, #16]
 8004932:	b973      	cbnz	r3, 8004952 <_svfiprintf_r+0x36>
 8004934:	2140      	movs	r1, #64	@ 0x40
 8004936:	f000 f90f 	bl	8004b58 <_malloc_r>
 800493a:	6028      	str	r0, [r5, #0]
 800493c:	6128      	str	r0, [r5, #16]
 800493e:	b930      	cbnz	r0, 800494e <_svfiprintf_r+0x32>
 8004940:	230c      	movs	r3, #12
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004948:	b01d      	add	sp, #116	@ 0x74
 800494a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494e:	2340      	movs	r3, #64	@ 0x40
 8004950:	616b      	str	r3, [r5, #20]
 8004952:	2300      	movs	r3, #0
 8004954:	9309      	str	r3, [sp, #36]	@ 0x24
 8004956:	2320      	movs	r3, #32
 8004958:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800495c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004960:	2330      	movs	r3, #48	@ 0x30
 8004962:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b00 <_svfiprintf_r+0x1e4>
 8004966:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800496a:	f04f 0901 	mov.w	r9, #1
 800496e:	4623      	mov	r3, r4
 8004970:	469a      	mov	sl, r3
 8004972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004976:	b10a      	cbz	r2, 800497c <_svfiprintf_r+0x60>
 8004978:	2a25      	cmp	r2, #37	@ 0x25
 800497a:	d1f9      	bne.n	8004970 <_svfiprintf_r+0x54>
 800497c:	ebba 0b04 	subs.w	fp, sl, r4
 8004980:	d00b      	beq.n	800499a <_svfiprintf_r+0x7e>
 8004982:	465b      	mov	r3, fp
 8004984:	4622      	mov	r2, r4
 8004986:	4629      	mov	r1, r5
 8004988:	4638      	mov	r0, r7
 800498a:	f7ff ff6b 	bl	8004864 <__ssputs_r>
 800498e:	3001      	adds	r0, #1
 8004990:	f000 80a7 	beq.w	8004ae2 <_svfiprintf_r+0x1c6>
 8004994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004996:	445a      	add	r2, fp
 8004998:	9209      	str	r2, [sp, #36]	@ 0x24
 800499a:	f89a 3000 	ldrb.w	r3, [sl]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 809f 	beq.w	8004ae2 <_svfiprintf_r+0x1c6>
 80049a4:	2300      	movs	r3, #0
 80049a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049ae:	f10a 0a01 	add.w	sl, sl, #1
 80049b2:	9304      	str	r3, [sp, #16]
 80049b4:	9307      	str	r3, [sp, #28]
 80049b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80049bc:	4654      	mov	r4, sl
 80049be:	2205      	movs	r2, #5
 80049c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c4:	484e      	ldr	r0, [pc, #312]	@ (8004b00 <_svfiprintf_r+0x1e4>)
 80049c6:	f7fb fc33 	bl	8000230 <memchr>
 80049ca:	9a04      	ldr	r2, [sp, #16]
 80049cc:	b9d8      	cbnz	r0, 8004a06 <_svfiprintf_r+0xea>
 80049ce:	06d0      	lsls	r0, r2, #27
 80049d0:	bf44      	itt	mi
 80049d2:	2320      	movmi	r3, #32
 80049d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049d8:	0711      	lsls	r1, r2, #28
 80049da:	bf44      	itt	mi
 80049dc:	232b      	movmi	r3, #43	@ 0x2b
 80049de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049e2:	f89a 3000 	ldrb.w	r3, [sl]
 80049e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049e8:	d015      	beq.n	8004a16 <_svfiprintf_r+0xfa>
 80049ea:	9a07      	ldr	r2, [sp, #28]
 80049ec:	4654      	mov	r4, sl
 80049ee:	2000      	movs	r0, #0
 80049f0:	f04f 0c0a 	mov.w	ip, #10
 80049f4:	4621      	mov	r1, r4
 80049f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049fa:	3b30      	subs	r3, #48	@ 0x30
 80049fc:	2b09      	cmp	r3, #9
 80049fe:	d94b      	bls.n	8004a98 <_svfiprintf_r+0x17c>
 8004a00:	b1b0      	cbz	r0, 8004a30 <_svfiprintf_r+0x114>
 8004a02:	9207      	str	r2, [sp, #28]
 8004a04:	e014      	b.n	8004a30 <_svfiprintf_r+0x114>
 8004a06:	eba0 0308 	sub.w	r3, r0, r8
 8004a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	9304      	str	r3, [sp, #16]
 8004a12:	46a2      	mov	sl, r4
 8004a14:	e7d2      	b.n	80049bc <_svfiprintf_r+0xa0>
 8004a16:	9b03      	ldr	r3, [sp, #12]
 8004a18:	1d19      	adds	r1, r3, #4
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	9103      	str	r1, [sp, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bfbb      	ittet	lt
 8004a22:	425b      	neglt	r3, r3
 8004a24:	f042 0202 	orrlt.w	r2, r2, #2
 8004a28:	9307      	strge	r3, [sp, #28]
 8004a2a:	9307      	strlt	r3, [sp, #28]
 8004a2c:	bfb8      	it	lt
 8004a2e:	9204      	strlt	r2, [sp, #16]
 8004a30:	7823      	ldrb	r3, [r4, #0]
 8004a32:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a34:	d10a      	bne.n	8004a4c <_svfiprintf_r+0x130>
 8004a36:	7863      	ldrb	r3, [r4, #1]
 8004a38:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a3a:	d132      	bne.n	8004aa2 <_svfiprintf_r+0x186>
 8004a3c:	9b03      	ldr	r3, [sp, #12]
 8004a3e:	1d1a      	adds	r2, r3, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	9203      	str	r2, [sp, #12]
 8004a44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a48:	3402      	adds	r4, #2
 8004a4a:	9305      	str	r3, [sp, #20]
 8004a4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b10 <_svfiprintf_r+0x1f4>
 8004a50:	7821      	ldrb	r1, [r4, #0]
 8004a52:	2203      	movs	r2, #3
 8004a54:	4650      	mov	r0, sl
 8004a56:	f7fb fbeb 	bl	8000230 <memchr>
 8004a5a:	b138      	cbz	r0, 8004a6c <_svfiprintf_r+0x150>
 8004a5c:	9b04      	ldr	r3, [sp, #16]
 8004a5e:	eba0 000a 	sub.w	r0, r0, sl
 8004a62:	2240      	movs	r2, #64	@ 0x40
 8004a64:	4082      	lsls	r2, r0
 8004a66:	4313      	orrs	r3, r2
 8004a68:	3401      	adds	r4, #1
 8004a6a:	9304      	str	r3, [sp, #16]
 8004a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a70:	4824      	ldr	r0, [pc, #144]	@ (8004b04 <_svfiprintf_r+0x1e8>)
 8004a72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a76:	2206      	movs	r2, #6
 8004a78:	f7fb fbda 	bl	8000230 <memchr>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d036      	beq.n	8004aee <_svfiprintf_r+0x1d2>
 8004a80:	4b21      	ldr	r3, [pc, #132]	@ (8004b08 <_svfiprintf_r+0x1ec>)
 8004a82:	bb1b      	cbnz	r3, 8004acc <_svfiprintf_r+0x1b0>
 8004a84:	9b03      	ldr	r3, [sp, #12]
 8004a86:	3307      	adds	r3, #7
 8004a88:	f023 0307 	bic.w	r3, r3, #7
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	9303      	str	r3, [sp, #12]
 8004a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a92:	4433      	add	r3, r6
 8004a94:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a96:	e76a      	b.n	800496e <_svfiprintf_r+0x52>
 8004a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	e7a8      	b.n	80049f4 <_svfiprintf_r+0xd8>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	3401      	adds	r4, #1
 8004aa6:	9305      	str	r3, [sp, #20]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	f04f 0c0a 	mov.w	ip, #10
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ab4:	3a30      	subs	r2, #48	@ 0x30
 8004ab6:	2a09      	cmp	r2, #9
 8004ab8:	d903      	bls.n	8004ac2 <_svfiprintf_r+0x1a6>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0c6      	beq.n	8004a4c <_svfiprintf_r+0x130>
 8004abe:	9105      	str	r1, [sp, #20]
 8004ac0:	e7c4      	b.n	8004a4c <_svfiprintf_r+0x130>
 8004ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e7f0      	b.n	8004aae <_svfiprintf_r+0x192>
 8004acc:	ab03      	add	r3, sp, #12
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	462a      	mov	r2, r5
 8004ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b0c <_svfiprintf_r+0x1f0>)
 8004ad4:	a904      	add	r1, sp, #16
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	f3af 8000 	nop.w
 8004adc:	1c42      	adds	r2, r0, #1
 8004ade:	4606      	mov	r6, r0
 8004ae0:	d1d6      	bne.n	8004a90 <_svfiprintf_r+0x174>
 8004ae2:	89ab      	ldrh	r3, [r5, #12]
 8004ae4:	065b      	lsls	r3, r3, #25
 8004ae6:	f53f af2d 	bmi.w	8004944 <_svfiprintf_r+0x28>
 8004aea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004aec:	e72c      	b.n	8004948 <_svfiprintf_r+0x2c>
 8004aee:	ab03      	add	r3, sp, #12
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	462a      	mov	r2, r5
 8004af4:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <_svfiprintf_r+0x1f0>)
 8004af6:	a904      	add	r1, sp, #16
 8004af8:	4638      	mov	r0, r7
 8004afa:	f000 f91b 	bl	8004d34 <_printf_i>
 8004afe:	e7ed      	b.n	8004adc <_svfiprintf_r+0x1c0>
 8004b00:	0800529c 	.word	0x0800529c
 8004b04:	080052a6 	.word	0x080052a6
 8004b08:	00000000 	.word	0x00000000
 8004b0c:	08004865 	.word	0x08004865
 8004b10:	080052a2 	.word	0x080052a2

08004b14 <sbrk_aligned>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	4e0f      	ldr	r6, [pc, #60]	@ (8004b54 <sbrk_aligned+0x40>)
 8004b18:	460c      	mov	r4, r1
 8004b1a:	6831      	ldr	r1, [r6, #0]
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	b911      	cbnz	r1, 8004b26 <sbrk_aligned+0x12>
 8004b20:	f000 fa7a 	bl	8005018 <_sbrk_r>
 8004b24:	6030      	str	r0, [r6, #0]
 8004b26:	4621      	mov	r1, r4
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f000 fa75 	bl	8005018 <_sbrk_r>
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	d103      	bne.n	8004b3a <sbrk_aligned+0x26>
 8004b32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b36:	4620      	mov	r0, r4
 8004b38:	bd70      	pop	{r4, r5, r6, pc}
 8004b3a:	1cc4      	adds	r4, r0, #3
 8004b3c:	f024 0403 	bic.w	r4, r4, #3
 8004b40:	42a0      	cmp	r0, r4
 8004b42:	d0f8      	beq.n	8004b36 <sbrk_aligned+0x22>
 8004b44:	1a21      	subs	r1, r4, r0
 8004b46:	4628      	mov	r0, r5
 8004b48:	f000 fa66 	bl	8005018 <_sbrk_r>
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d1f2      	bne.n	8004b36 <sbrk_aligned+0x22>
 8004b50:	e7ef      	b.n	8004b32 <sbrk_aligned+0x1e>
 8004b52:	bf00      	nop
 8004b54:	20000648 	.word	0x20000648

08004b58 <_malloc_r>:
 8004b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b5c:	1ccd      	adds	r5, r1, #3
 8004b5e:	f025 0503 	bic.w	r5, r5, #3
 8004b62:	3508      	adds	r5, #8
 8004b64:	2d0c      	cmp	r5, #12
 8004b66:	bf38      	it	cc
 8004b68:	250c      	movcc	r5, #12
 8004b6a:	2d00      	cmp	r5, #0
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	db01      	blt.n	8004b74 <_malloc_r+0x1c>
 8004b70:	42a9      	cmp	r1, r5
 8004b72:	d904      	bls.n	8004b7e <_malloc_r+0x26>
 8004b74:	230c      	movs	r3, #12
 8004b76:	6033      	str	r3, [r6, #0]
 8004b78:	2000      	movs	r0, #0
 8004b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c54 <_malloc_r+0xfc>
 8004b82:	f000 f9f5 	bl	8004f70 <__malloc_lock>
 8004b86:	f8d8 3000 	ldr.w	r3, [r8]
 8004b8a:	461c      	mov	r4, r3
 8004b8c:	bb44      	cbnz	r4, 8004be0 <_malloc_r+0x88>
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4630      	mov	r0, r6
 8004b92:	f7ff ffbf 	bl	8004b14 <sbrk_aligned>
 8004b96:	1c43      	adds	r3, r0, #1
 8004b98:	4604      	mov	r4, r0
 8004b9a:	d158      	bne.n	8004c4e <_malloc_r+0xf6>
 8004b9c:	f8d8 4000 	ldr.w	r4, [r8]
 8004ba0:	4627      	mov	r7, r4
 8004ba2:	2f00      	cmp	r7, #0
 8004ba4:	d143      	bne.n	8004c2e <_malloc_r+0xd6>
 8004ba6:	2c00      	cmp	r4, #0
 8004ba8:	d04b      	beq.n	8004c42 <_malloc_r+0xea>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	4639      	mov	r1, r7
 8004bae:	4630      	mov	r0, r6
 8004bb0:	eb04 0903 	add.w	r9, r4, r3
 8004bb4:	f000 fa30 	bl	8005018 <_sbrk_r>
 8004bb8:	4581      	cmp	r9, r0
 8004bba:	d142      	bne.n	8004c42 <_malloc_r+0xea>
 8004bbc:	6821      	ldr	r1, [r4, #0]
 8004bbe:	1a6d      	subs	r5, r5, r1
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f7ff ffa6 	bl	8004b14 <sbrk_aligned>
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d03a      	beq.n	8004c42 <_malloc_r+0xea>
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	442b      	add	r3, r5
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	bb62      	cbnz	r2, 8004c34 <_malloc_r+0xdc>
 8004bda:	f8c8 7000 	str.w	r7, [r8]
 8004bde:	e00f      	b.n	8004c00 <_malloc_r+0xa8>
 8004be0:	6822      	ldr	r2, [r4, #0]
 8004be2:	1b52      	subs	r2, r2, r5
 8004be4:	d420      	bmi.n	8004c28 <_malloc_r+0xd0>
 8004be6:	2a0b      	cmp	r2, #11
 8004be8:	d917      	bls.n	8004c1a <_malloc_r+0xc2>
 8004bea:	1961      	adds	r1, r4, r5
 8004bec:	42a3      	cmp	r3, r4
 8004bee:	6025      	str	r5, [r4, #0]
 8004bf0:	bf18      	it	ne
 8004bf2:	6059      	strne	r1, [r3, #4]
 8004bf4:	6863      	ldr	r3, [r4, #4]
 8004bf6:	bf08      	it	eq
 8004bf8:	f8c8 1000 	streq.w	r1, [r8]
 8004bfc:	5162      	str	r2, [r4, r5]
 8004bfe:	604b      	str	r3, [r1, #4]
 8004c00:	4630      	mov	r0, r6
 8004c02:	f000 f9bb 	bl	8004f7c <__malloc_unlock>
 8004c06:	f104 000b 	add.w	r0, r4, #11
 8004c0a:	1d23      	adds	r3, r4, #4
 8004c0c:	f020 0007 	bic.w	r0, r0, #7
 8004c10:	1ac2      	subs	r2, r0, r3
 8004c12:	bf1c      	itt	ne
 8004c14:	1a1b      	subne	r3, r3, r0
 8004c16:	50a3      	strne	r3, [r4, r2]
 8004c18:	e7af      	b.n	8004b7a <_malloc_r+0x22>
 8004c1a:	6862      	ldr	r2, [r4, #4]
 8004c1c:	42a3      	cmp	r3, r4
 8004c1e:	bf0c      	ite	eq
 8004c20:	f8c8 2000 	streq.w	r2, [r8]
 8004c24:	605a      	strne	r2, [r3, #4]
 8004c26:	e7eb      	b.n	8004c00 <_malloc_r+0xa8>
 8004c28:	4623      	mov	r3, r4
 8004c2a:	6864      	ldr	r4, [r4, #4]
 8004c2c:	e7ae      	b.n	8004b8c <_malloc_r+0x34>
 8004c2e:	463c      	mov	r4, r7
 8004c30:	687f      	ldr	r7, [r7, #4]
 8004c32:	e7b6      	b.n	8004ba2 <_malloc_r+0x4a>
 8004c34:	461a      	mov	r2, r3
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	42a3      	cmp	r3, r4
 8004c3a:	d1fb      	bne.n	8004c34 <_malloc_r+0xdc>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	6053      	str	r3, [r2, #4]
 8004c40:	e7de      	b.n	8004c00 <_malloc_r+0xa8>
 8004c42:	230c      	movs	r3, #12
 8004c44:	6033      	str	r3, [r6, #0]
 8004c46:	4630      	mov	r0, r6
 8004c48:	f000 f998 	bl	8004f7c <__malloc_unlock>
 8004c4c:	e794      	b.n	8004b78 <_malloc_r+0x20>
 8004c4e:	6005      	str	r5, [r0, #0]
 8004c50:	e7d6      	b.n	8004c00 <_malloc_r+0xa8>
 8004c52:	bf00      	nop
 8004c54:	2000064c 	.word	0x2000064c

08004c58 <_printf_common>:
 8004c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5c:	4616      	mov	r6, r2
 8004c5e:	4698      	mov	r8, r3
 8004c60:	688a      	ldr	r2, [r1, #8]
 8004c62:	690b      	ldr	r3, [r1, #16]
 8004c64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	bfb8      	it	lt
 8004c6c:	4613      	movlt	r3, r2
 8004c6e:	6033      	str	r3, [r6, #0]
 8004c70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c74:	4607      	mov	r7, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	b10a      	cbz	r2, 8004c7e <_printf_common+0x26>
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	6033      	str	r3, [r6, #0]
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	0699      	lsls	r1, r3, #26
 8004c82:	bf42      	ittt	mi
 8004c84:	6833      	ldrmi	r3, [r6, #0]
 8004c86:	3302      	addmi	r3, #2
 8004c88:	6033      	strmi	r3, [r6, #0]
 8004c8a:	6825      	ldr	r5, [r4, #0]
 8004c8c:	f015 0506 	ands.w	r5, r5, #6
 8004c90:	d106      	bne.n	8004ca0 <_printf_common+0x48>
 8004c92:	f104 0a19 	add.w	sl, r4, #25
 8004c96:	68e3      	ldr	r3, [r4, #12]
 8004c98:	6832      	ldr	r2, [r6, #0]
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	42ab      	cmp	r3, r5
 8004c9e:	dc26      	bgt.n	8004cee <_printf_common+0x96>
 8004ca0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ca4:	6822      	ldr	r2, [r4, #0]
 8004ca6:	3b00      	subs	r3, #0
 8004ca8:	bf18      	it	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	0692      	lsls	r2, r2, #26
 8004cae:	d42b      	bmi.n	8004d08 <_printf_common+0xb0>
 8004cb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	47c8      	blx	r9
 8004cba:	3001      	adds	r0, #1
 8004cbc:	d01e      	beq.n	8004cfc <_printf_common+0xa4>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	6922      	ldr	r2, [r4, #16]
 8004cc2:	f003 0306 	and.w	r3, r3, #6
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	bf02      	ittt	eq
 8004cca:	68e5      	ldreq	r5, [r4, #12]
 8004ccc:	6833      	ldreq	r3, [r6, #0]
 8004cce:	1aed      	subeq	r5, r5, r3
 8004cd0:	68a3      	ldr	r3, [r4, #8]
 8004cd2:	bf0c      	ite	eq
 8004cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cd8:	2500      	movne	r5, #0
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	bfc4      	itt	gt
 8004cde:	1a9b      	subgt	r3, r3, r2
 8004ce0:	18ed      	addgt	r5, r5, r3
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	341a      	adds	r4, #26
 8004ce6:	42b5      	cmp	r5, r6
 8004ce8:	d11a      	bne.n	8004d20 <_printf_common+0xc8>
 8004cea:	2000      	movs	r0, #0
 8004cec:	e008      	b.n	8004d00 <_printf_common+0xa8>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	4652      	mov	r2, sl
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	47c8      	blx	r9
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d103      	bne.n	8004d04 <_printf_common+0xac>
 8004cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d04:	3501      	adds	r5, #1
 8004d06:	e7c6      	b.n	8004c96 <_printf_common+0x3e>
 8004d08:	18e1      	adds	r1, r4, r3
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	2030      	movs	r0, #48	@ 0x30
 8004d0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d12:	4422      	add	r2, r4
 8004d14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d1c:	3302      	adds	r3, #2
 8004d1e:	e7c7      	b.n	8004cb0 <_printf_common+0x58>
 8004d20:	2301      	movs	r3, #1
 8004d22:	4622      	mov	r2, r4
 8004d24:	4641      	mov	r1, r8
 8004d26:	4638      	mov	r0, r7
 8004d28:	47c8      	blx	r9
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d0e6      	beq.n	8004cfc <_printf_common+0xa4>
 8004d2e:	3601      	adds	r6, #1
 8004d30:	e7d9      	b.n	8004ce6 <_printf_common+0x8e>
	...

08004d34 <_printf_i>:
 8004d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	7e0f      	ldrb	r7, [r1, #24]
 8004d3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d3c:	2f78      	cmp	r7, #120	@ 0x78
 8004d3e:	4691      	mov	r9, r2
 8004d40:	4680      	mov	r8, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	469a      	mov	sl, r3
 8004d46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d4a:	d807      	bhi.n	8004d5c <_printf_i+0x28>
 8004d4c:	2f62      	cmp	r7, #98	@ 0x62
 8004d4e:	d80a      	bhi.n	8004d66 <_printf_i+0x32>
 8004d50:	2f00      	cmp	r7, #0
 8004d52:	f000 80d1 	beq.w	8004ef8 <_printf_i+0x1c4>
 8004d56:	2f58      	cmp	r7, #88	@ 0x58
 8004d58:	f000 80b8 	beq.w	8004ecc <_printf_i+0x198>
 8004d5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d64:	e03a      	b.n	8004ddc <_printf_i+0xa8>
 8004d66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d6a:	2b15      	cmp	r3, #21
 8004d6c:	d8f6      	bhi.n	8004d5c <_printf_i+0x28>
 8004d6e:	a101      	add	r1, pc, #4	@ (adr r1, 8004d74 <_printf_i+0x40>)
 8004d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d74:	08004dcd 	.word	0x08004dcd
 8004d78:	08004de1 	.word	0x08004de1
 8004d7c:	08004d5d 	.word	0x08004d5d
 8004d80:	08004d5d 	.word	0x08004d5d
 8004d84:	08004d5d 	.word	0x08004d5d
 8004d88:	08004d5d 	.word	0x08004d5d
 8004d8c:	08004de1 	.word	0x08004de1
 8004d90:	08004d5d 	.word	0x08004d5d
 8004d94:	08004d5d 	.word	0x08004d5d
 8004d98:	08004d5d 	.word	0x08004d5d
 8004d9c:	08004d5d 	.word	0x08004d5d
 8004da0:	08004edf 	.word	0x08004edf
 8004da4:	08004e0b 	.word	0x08004e0b
 8004da8:	08004e99 	.word	0x08004e99
 8004dac:	08004d5d 	.word	0x08004d5d
 8004db0:	08004d5d 	.word	0x08004d5d
 8004db4:	08004f01 	.word	0x08004f01
 8004db8:	08004d5d 	.word	0x08004d5d
 8004dbc:	08004e0b 	.word	0x08004e0b
 8004dc0:	08004d5d 	.word	0x08004d5d
 8004dc4:	08004d5d 	.word	0x08004d5d
 8004dc8:	08004ea1 	.word	0x08004ea1
 8004dcc:	6833      	ldr	r3, [r6, #0]
 8004dce:	1d1a      	adds	r2, r3, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6032      	str	r2, [r6, #0]
 8004dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e09c      	b.n	8004f1a <_printf_i+0x1e6>
 8004de0:	6833      	ldr	r3, [r6, #0]
 8004de2:	6820      	ldr	r0, [r4, #0]
 8004de4:	1d19      	adds	r1, r3, #4
 8004de6:	6031      	str	r1, [r6, #0]
 8004de8:	0606      	lsls	r6, r0, #24
 8004dea:	d501      	bpl.n	8004df0 <_printf_i+0xbc>
 8004dec:	681d      	ldr	r5, [r3, #0]
 8004dee:	e003      	b.n	8004df8 <_printf_i+0xc4>
 8004df0:	0645      	lsls	r5, r0, #25
 8004df2:	d5fb      	bpl.n	8004dec <_printf_i+0xb8>
 8004df4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004df8:	2d00      	cmp	r5, #0
 8004dfa:	da03      	bge.n	8004e04 <_printf_i+0xd0>
 8004dfc:	232d      	movs	r3, #45	@ 0x2d
 8004dfe:	426d      	negs	r5, r5
 8004e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e04:	4858      	ldr	r0, [pc, #352]	@ (8004f68 <_printf_i+0x234>)
 8004e06:	230a      	movs	r3, #10
 8004e08:	e011      	b.n	8004e2e <_printf_i+0xfa>
 8004e0a:	6821      	ldr	r1, [r4, #0]
 8004e0c:	6833      	ldr	r3, [r6, #0]
 8004e0e:	0608      	lsls	r0, r1, #24
 8004e10:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e14:	d402      	bmi.n	8004e1c <_printf_i+0xe8>
 8004e16:	0649      	lsls	r1, r1, #25
 8004e18:	bf48      	it	mi
 8004e1a:	b2ad      	uxthmi	r5, r5
 8004e1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e1e:	4852      	ldr	r0, [pc, #328]	@ (8004f68 <_printf_i+0x234>)
 8004e20:	6033      	str	r3, [r6, #0]
 8004e22:	bf14      	ite	ne
 8004e24:	230a      	movne	r3, #10
 8004e26:	2308      	moveq	r3, #8
 8004e28:	2100      	movs	r1, #0
 8004e2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e2e:	6866      	ldr	r6, [r4, #4]
 8004e30:	60a6      	str	r6, [r4, #8]
 8004e32:	2e00      	cmp	r6, #0
 8004e34:	db05      	blt.n	8004e42 <_printf_i+0x10e>
 8004e36:	6821      	ldr	r1, [r4, #0]
 8004e38:	432e      	orrs	r6, r5
 8004e3a:	f021 0104 	bic.w	r1, r1, #4
 8004e3e:	6021      	str	r1, [r4, #0]
 8004e40:	d04b      	beq.n	8004eda <_printf_i+0x1a6>
 8004e42:	4616      	mov	r6, r2
 8004e44:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e48:	fb03 5711 	mls	r7, r3, r1, r5
 8004e4c:	5dc7      	ldrb	r7, [r0, r7]
 8004e4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e52:	462f      	mov	r7, r5
 8004e54:	42bb      	cmp	r3, r7
 8004e56:	460d      	mov	r5, r1
 8004e58:	d9f4      	bls.n	8004e44 <_printf_i+0x110>
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d10b      	bne.n	8004e76 <_printf_i+0x142>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	07df      	lsls	r7, r3, #31
 8004e62:	d508      	bpl.n	8004e76 <_printf_i+0x142>
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	6861      	ldr	r1, [r4, #4]
 8004e68:	4299      	cmp	r1, r3
 8004e6a:	bfde      	ittt	le
 8004e6c:	2330      	movle	r3, #48	@ 0x30
 8004e6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e72:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004e76:	1b92      	subs	r2, r2, r6
 8004e78:	6122      	str	r2, [r4, #16]
 8004e7a:	f8cd a000 	str.w	sl, [sp]
 8004e7e:	464b      	mov	r3, r9
 8004e80:	aa03      	add	r2, sp, #12
 8004e82:	4621      	mov	r1, r4
 8004e84:	4640      	mov	r0, r8
 8004e86:	f7ff fee7 	bl	8004c58 <_printf_common>
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d14a      	bne.n	8004f24 <_printf_i+0x1f0>
 8004e8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e92:	b004      	add	sp, #16
 8004e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	f043 0320 	orr.w	r3, r3, #32
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	4832      	ldr	r0, [pc, #200]	@ (8004f6c <_printf_i+0x238>)
 8004ea2:	2778      	movs	r7, #120	@ 0x78
 8004ea4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	6831      	ldr	r1, [r6, #0]
 8004eac:	061f      	lsls	r7, r3, #24
 8004eae:	f851 5b04 	ldr.w	r5, [r1], #4
 8004eb2:	d402      	bmi.n	8004eba <_printf_i+0x186>
 8004eb4:	065f      	lsls	r7, r3, #25
 8004eb6:	bf48      	it	mi
 8004eb8:	b2ad      	uxthmi	r5, r5
 8004eba:	6031      	str	r1, [r6, #0]
 8004ebc:	07d9      	lsls	r1, r3, #31
 8004ebe:	bf44      	itt	mi
 8004ec0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ec4:	6023      	strmi	r3, [r4, #0]
 8004ec6:	b11d      	cbz	r5, 8004ed0 <_printf_i+0x19c>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	e7ad      	b.n	8004e28 <_printf_i+0xf4>
 8004ecc:	4826      	ldr	r0, [pc, #152]	@ (8004f68 <_printf_i+0x234>)
 8004ece:	e7e9      	b.n	8004ea4 <_printf_i+0x170>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	f023 0320 	bic.w	r3, r3, #32
 8004ed6:	6023      	str	r3, [r4, #0]
 8004ed8:	e7f6      	b.n	8004ec8 <_printf_i+0x194>
 8004eda:	4616      	mov	r6, r2
 8004edc:	e7bd      	b.n	8004e5a <_printf_i+0x126>
 8004ede:	6833      	ldr	r3, [r6, #0]
 8004ee0:	6825      	ldr	r5, [r4, #0]
 8004ee2:	6961      	ldr	r1, [r4, #20]
 8004ee4:	1d18      	adds	r0, r3, #4
 8004ee6:	6030      	str	r0, [r6, #0]
 8004ee8:	062e      	lsls	r6, r5, #24
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	d501      	bpl.n	8004ef2 <_printf_i+0x1be>
 8004eee:	6019      	str	r1, [r3, #0]
 8004ef0:	e002      	b.n	8004ef8 <_printf_i+0x1c4>
 8004ef2:	0668      	lsls	r0, r5, #25
 8004ef4:	d5fb      	bpl.n	8004eee <_printf_i+0x1ba>
 8004ef6:	8019      	strh	r1, [r3, #0]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	6123      	str	r3, [r4, #16]
 8004efc:	4616      	mov	r6, r2
 8004efe:	e7bc      	b.n	8004e7a <_printf_i+0x146>
 8004f00:	6833      	ldr	r3, [r6, #0]
 8004f02:	1d1a      	adds	r2, r3, #4
 8004f04:	6032      	str	r2, [r6, #0]
 8004f06:	681e      	ldr	r6, [r3, #0]
 8004f08:	6862      	ldr	r2, [r4, #4]
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f7fb f98f 	bl	8000230 <memchr>
 8004f12:	b108      	cbz	r0, 8004f18 <_printf_i+0x1e4>
 8004f14:	1b80      	subs	r0, r0, r6
 8004f16:	6060      	str	r0, [r4, #4]
 8004f18:	6863      	ldr	r3, [r4, #4]
 8004f1a:	6123      	str	r3, [r4, #16]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f22:	e7aa      	b.n	8004e7a <_printf_i+0x146>
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	4632      	mov	r2, r6
 8004f28:	4649      	mov	r1, r9
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	47d0      	blx	sl
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d0ad      	beq.n	8004e8e <_printf_i+0x15a>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	079b      	lsls	r3, r3, #30
 8004f36:	d413      	bmi.n	8004f60 <_printf_i+0x22c>
 8004f38:	68e0      	ldr	r0, [r4, #12]
 8004f3a:	9b03      	ldr	r3, [sp, #12]
 8004f3c:	4298      	cmp	r0, r3
 8004f3e:	bfb8      	it	lt
 8004f40:	4618      	movlt	r0, r3
 8004f42:	e7a6      	b.n	8004e92 <_printf_i+0x15e>
 8004f44:	2301      	movs	r3, #1
 8004f46:	4632      	mov	r2, r6
 8004f48:	4649      	mov	r1, r9
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	47d0      	blx	sl
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d09d      	beq.n	8004e8e <_printf_i+0x15a>
 8004f52:	3501      	adds	r5, #1
 8004f54:	68e3      	ldr	r3, [r4, #12]
 8004f56:	9903      	ldr	r1, [sp, #12]
 8004f58:	1a5b      	subs	r3, r3, r1
 8004f5a:	42ab      	cmp	r3, r5
 8004f5c:	dcf2      	bgt.n	8004f44 <_printf_i+0x210>
 8004f5e:	e7eb      	b.n	8004f38 <_printf_i+0x204>
 8004f60:	2500      	movs	r5, #0
 8004f62:	f104 0619 	add.w	r6, r4, #25
 8004f66:	e7f5      	b.n	8004f54 <_printf_i+0x220>
 8004f68:	080052ad 	.word	0x080052ad
 8004f6c:	080052be 	.word	0x080052be

08004f70 <__malloc_lock>:
 8004f70:	4801      	ldr	r0, [pc, #4]	@ (8004f78 <__malloc_lock+0x8>)
 8004f72:	f7ff bc67 	b.w	8004844 <__retarget_lock_acquire_recursive>
 8004f76:	bf00      	nop
 8004f78:	20000644 	.word	0x20000644

08004f7c <__malloc_unlock>:
 8004f7c:	4801      	ldr	r0, [pc, #4]	@ (8004f84 <__malloc_unlock+0x8>)
 8004f7e:	f7ff bc62 	b.w	8004846 <__retarget_lock_release_recursive>
 8004f82:	bf00      	nop
 8004f84:	20000644 	.word	0x20000644

08004f88 <_realloc_r>:
 8004f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	4614      	mov	r4, r2
 8004f90:	460d      	mov	r5, r1
 8004f92:	b921      	cbnz	r1, 8004f9e <_realloc_r+0x16>
 8004f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f98:	4611      	mov	r1, r2
 8004f9a:	f7ff bddd 	b.w	8004b58 <_malloc_r>
 8004f9e:	b92a      	cbnz	r2, 8004fac <_realloc_r+0x24>
 8004fa0:	f000 f84a 	bl	8005038 <_free_r>
 8004fa4:	4625      	mov	r5, r4
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fac:	f000 f88e 	bl	80050cc <_malloc_usable_size_r>
 8004fb0:	4284      	cmp	r4, r0
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	d802      	bhi.n	8004fbc <_realloc_r+0x34>
 8004fb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fba:	d8f4      	bhi.n	8004fa6 <_realloc_r+0x1e>
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	f7ff fdca 	bl	8004b58 <_malloc_r>
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	b908      	cbnz	r0, 8004fcc <_realloc_r+0x44>
 8004fc8:	4645      	mov	r5, r8
 8004fca:	e7ec      	b.n	8004fa6 <_realloc_r+0x1e>
 8004fcc:	42b4      	cmp	r4, r6
 8004fce:	4622      	mov	r2, r4
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	bf28      	it	cs
 8004fd4:	4632      	movcs	r2, r6
 8004fd6:	f7ff fc37 	bl	8004848 <memcpy>
 8004fda:	4629      	mov	r1, r5
 8004fdc:	4638      	mov	r0, r7
 8004fde:	f000 f82b 	bl	8005038 <_free_r>
 8004fe2:	e7f1      	b.n	8004fc8 <_realloc_r+0x40>

08004fe4 <memmove>:
 8004fe4:	4288      	cmp	r0, r1
 8004fe6:	b510      	push	{r4, lr}
 8004fe8:	eb01 0402 	add.w	r4, r1, r2
 8004fec:	d902      	bls.n	8004ff4 <memmove+0x10>
 8004fee:	4284      	cmp	r4, r0
 8004ff0:	4623      	mov	r3, r4
 8004ff2:	d807      	bhi.n	8005004 <memmove+0x20>
 8004ff4:	1e43      	subs	r3, r0, #1
 8004ff6:	42a1      	cmp	r1, r4
 8004ff8:	d008      	beq.n	800500c <memmove+0x28>
 8004ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005002:	e7f8      	b.n	8004ff6 <memmove+0x12>
 8005004:	4402      	add	r2, r0
 8005006:	4601      	mov	r1, r0
 8005008:	428a      	cmp	r2, r1
 800500a:	d100      	bne.n	800500e <memmove+0x2a>
 800500c:	bd10      	pop	{r4, pc}
 800500e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005016:	e7f7      	b.n	8005008 <memmove+0x24>

08005018 <_sbrk_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4d06      	ldr	r5, [pc, #24]	@ (8005034 <_sbrk_r+0x1c>)
 800501c:	2300      	movs	r3, #0
 800501e:	4604      	mov	r4, r0
 8005020:	4608      	mov	r0, r1
 8005022:	602b      	str	r3, [r5, #0]
 8005024:	f7fb fe84 	bl	8000d30 <_sbrk>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	d102      	bne.n	8005032 <_sbrk_r+0x1a>
 800502c:	682b      	ldr	r3, [r5, #0]
 800502e:	b103      	cbz	r3, 8005032 <_sbrk_r+0x1a>
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	bd38      	pop	{r3, r4, r5, pc}
 8005034:	20000650 	.word	0x20000650

08005038 <_free_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	4605      	mov	r5, r0
 800503c:	2900      	cmp	r1, #0
 800503e:	d041      	beq.n	80050c4 <_free_r+0x8c>
 8005040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005044:	1f0c      	subs	r4, r1, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	bfb8      	it	lt
 800504a:	18e4      	addlt	r4, r4, r3
 800504c:	f7ff ff90 	bl	8004f70 <__malloc_lock>
 8005050:	4a1d      	ldr	r2, [pc, #116]	@ (80050c8 <_free_r+0x90>)
 8005052:	6813      	ldr	r3, [r2, #0]
 8005054:	b933      	cbnz	r3, 8005064 <_free_r+0x2c>
 8005056:	6063      	str	r3, [r4, #4]
 8005058:	6014      	str	r4, [r2, #0]
 800505a:	4628      	mov	r0, r5
 800505c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005060:	f7ff bf8c 	b.w	8004f7c <__malloc_unlock>
 8005064:	42a3      	cmp	r3, r4
 8005066:	d908      	bls.n	800507a <_free_r+0x42>
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	1821      	adds	r1, r4, r0
 800506c:	428b      	cmp	r3, r1
 800506e:	bf01      	itttt	eq
 8005070:	6819      	ldreq	r1, [r3, #0]
 8005072:	685b      	ldreq	r3, [r3, #4]
 8005074:	1809      	addeq	r1, r1, r0
 8005076:	6021      	streq	r1, [r4, #0]
 8005078:	e7ed      	b.n	8005056 <_free_r+0x1e>
 800507a:	461a      	mov	r2, r3
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	b10b      	cbz	r3, 8005084 <_free_r+0x4c>
 8005080:	42a3      	cmp	r3, r4
 8005082:	d9fa      	bls.n	800507a <_free_r+0x42>
 8005084:	6811      	ldr	r1, [r2, #0]
 8005086:	1850      	adds	r0, r2, r1
 8005088:	42a0      	cmp	r0, r4
 800508a:	d10b      	bne.n	80050a4 <_free_r+0x6c>
 800508c:	6820      	ldr	r0, [r4, #0]
 800508e:	4401      	add	r1, r0
 8005090:	1850      	adds	r0, r2, r1
 8005092:	4283      	cmp	r3, r0
 8005094:	6011      	str	r1, [r2, #0]
 8005096:	d1e0      	bne.n	800505a <_free_r+0x22>
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	6053      	str	r3, [r2, #4]
 800509e:	4408      	add	r0, r1
 80050a0:	6010      	str	r0, [r2, #0]
 80050a2:	e7da      	b.n	800505a <_free_r+0x22>
 80050a4:	d902      	bls.n	80050ac <_free_r+0x74>
 80050a6:	230c      	movs	r3, #12
 80050a8:	602b      	str	r3, [r5, #0]
 80050aa:	e7d6      	b.n	800505a <_free_r+0x22>
 80050ac:	6820      	ldr	r0, [r4, #0]
 80050ae:	1821      	adds	r1, r4, r0
 80050b0:	428b      	cmp	r3, r1
 80050b2:	bf04      	itt	eq
 80050b4:	6819      	ldreq	r1, [r3, #0]
 80050b6:	685b      	ldreq	r3, [r3, #4]
 80050b8:	6063      	str	r3, [r4, #4]
 80050ba:	bf04      	itt	eq
 80050bc:	1809      	addeq	r1, r1, r0
 80050be:	6021      	streq	r1, [r4, #0]
 80050c0:	6054      	str	r4, [r2, #4]
 80050c2:	e7ca      	b.n	800505a <_free_r+0x22>
 80050c4:	bd38      	pop	{r3, r4, r5, pc}
 80050c6:	bf00      	nop
 80050c8:	2000064c 	.word	0x2000064c

080050cc <_malloc_usable_size_r>:
 80050cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d0:	1f18      	subs	r0, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bfbc      	itt	lt
 80050d6:	580b      	ldrlt	r3, [r1, r0]
 80050d8:	18c0      	addlt	r0, r0, r3
 80050da:	4770      	bx	lr

080050dc <_init>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	bf00      	nop
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr

080050e8 <_fini>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr
