#include "menu.h"
#include "vt100.h"
#include <string.h>

// Internal state machine for ESC sequence handling
typedef enum {
    ESC_STATE_NONE = 0,
    ESC_STATE_ESC,
    ESC_STATE_BRACKET
} MenuEscState;

// Menu data
#define MENU_TOTAL_LINES 5
#define MENU_LINE_SPACER 2

static const char* menu_lines[MENU_TOTAL_LINES] = {
    "Option 1 - Sensor Config",
    "Option 2 - Motor Control",
    "Option 3 - System Info",
    "Option 4 - LCD Settings",
    "Option 5 - Exit"
};

static const char* intro_lines[] = {
    "-------------------------",
    "  Welcome to the System!",
    "  Select an option below:",
    "-------------------------"
};

#define NUM_INTRO_LINES (sizeof(intro_lines) / sizeof(intro_lines[0])) // !!
#define NUM_INSTRUCTION_LINES 1
#define MENU_TOP_OFFSET (NUM_INTRO_LINES + NUM_INSTRUCTION_LINES + MENU_LINE_SPACER) // 8

static int selected_index = 0;
static MenuEscState esc_state = ESC_STATE_NONE;

// Display entire menu
void Menu_Init(void) {
    vt100_clear_screen();
    vt100_goto_line(1);
    Menu_Display();
}

// Full redraw (intro, instructions, menu lines)
void Menu_Display(void) {
    vt100_cursor_hide();
    vt100_goto_line(1);

    for (size_t i = 0; i < NUM_INTRO_LINES; i++) {
        vt100_print_info_line(intro_lines[i]);
    }

    vt100_print_info_line("");
    vt100_print_info_line(VT100_BOLD "Use ↑ ↓ to navigate. Press Enter to select." VT100_RESET);

    for (int i = 0; i < MENU_TOTAL_LINES; i++) {
        Menu_UpdateLine(i, i == selected_index);
    }

    vt100_cursor_show();
}

// Redraw only one line (for efficient updates)
void Menu_UpdateLine(int index, int is_selected) {
    vt100_goto_line(MENU_TOP_OFFSET + index);
    vt100_clear_line();
    vt100_print_menu_line(menu_lines[index], is_selected);
}

// Action on ENTER
static void Menu_ExecuteSelected(int index) {
    vt100_print_info_line("");
    vt100_set_color(VT100_GREEN);
    vt100_print_info_line(menu_lines[index]);
    vt100_reset_color();
}

// FSM for input parsing and menu navigation
void Menu_HandleInput(uint8_t input) {
    int old_index = selected_index;

    switch (esc_state) {
        case ESC_STATE_NONE:
            if (input == MENU_KEY_ESC) esc_state = ESC_STATE_ESC;
            else if (input == MENU_KEY_ENTER) Menu_ExecuteSelected(selected_index);
            break;
        case ESC_STATE_ESC:
            if (input == MENU_KEY_BRACKET) esc_state = ESC_STATE_BRACKET;
            else esc_state = ESC_STATE_NONE;
            break;
        case ESC_STATE_BRACKET:
            if (input == MENU_KEY_ARROW_UP) selected_index = (selected_index == 0) ? MENU_TOTAL_LINES - 1 : selected_index - 1;
            else if (input == MENU_KEY_ARROW_DOWN) selected_index = (selected_index + 1) % MENU_TOTAL_LINES;

            if (old_index != selected_index) {
                Menu_UpdateLine(old_index, 0);
                Menu_UpdateLine(selected_index, 1);
            }
            esc_state = ESC_STATE_NONE;
            break;
        default:
            esc_state = ESC_STATE_NONE;
            break;
    }
}
