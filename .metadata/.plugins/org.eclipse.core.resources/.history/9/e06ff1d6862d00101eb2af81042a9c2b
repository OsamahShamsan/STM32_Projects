
#include <vt100_uart.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include "usart.h"

void vt100_uart_send(const char* str) {
    if (str == NULL) return;

    size_t actual_len = strlen(str);

    if (actual_len > VT100_MAX_TX_LEN)
        actual_len = VT100_MAX_TX_LEN;  // truncate safely

    HAL_UART_Transmit(&huart2, (uint8_t*)str, (uint16_t)actual_len, HAL_MAX_DELAY);
}

void vt100_uart_send_async(const char* str) {
    if (uart_tx_busy || str == NULL) return;

    size_t len = strlen(str);
    if (len > VT100_TX_BUFFER_SIZE)
        len = VT100_TX_BUFFER_SIZE;  // truncate to fit buffer

    memcpy(tx_buffer, str, len);

    uart_tx_busy = 1;
    HAL_UART_Transmit_IT(&huart2, tx_buffer, (uint16_t)len);
}

// Called automatically when HAL completes the transmit
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart == &huart2) {
        uart_tx_busy = 0;
    }
}

void vt100_clear_screen() {
    vt100_uart_send(VT100_CLEAR_SCREEN);
    vt100_uart_send(VT100_CURSOR_HOME);
}

void vt100_move_cursor(uint8_t row, uint8_t col) {
    char buf[16];
    snprintf(buf, sizeof(buf), "\033[%d;%dH", row, col);
    vt100_uart_send(buf);
}

void vt100_set_color(const char* attr) {
    vt100_uart_send(attr);
}

void vt100_reset_color() {
    vt100_uart_send(VT100_RESET);
}

