#include "menu.h"
#include "uart_dma.h"
#include "vt100.h"
#include <string.h>

static const char* intro_lines[] = {
    "-------------------------",
    "  Welcome to the System!",
    "  Select an option below:",
    "-------------------------"
};

static const char* instructions =
    VT100_BOLD "Use ↑ ↓ to navigate. Press Enter to select.\r\n\r\n" VT100_RESET;

static const char* menu_lines[MENU_TOTAL_LINES] = {
    "Option 1 - Sensor Config",
    "Option 2 - Motor Control",
    "Option 3 - System Info",
    "Option 4 - LCD Settings",
    "Option 5 - Exit"
};

#define MENU_MARKER_SELECTED "> "
#define MENU_MARKER_NORMAL   "  "

static int selected_index = 0;
static MenuEscState esc_state = ESC_STATE_NONE;

void send_line(const char* text, int is_selected) {
    const char* marker = is_selected ? MENU_MARKER_SELECTED : MENU_MARKER_NORMAL;
    uart_dma_send((uint8_t*)marker, strlen(marker));
    uart_dma_send((uint8_t*)text, strlen(text));
    uart_dma_send((uint8_t*)"\r\n", 2);
}

void Menu_Init(void) {
    selected_index = 0;
    esc_state = ESC_STATE_NONE;
    uart_dma_send((uint8_t*)VT100_CLEAR_SCREEN, strlen(VT100_CLEAR_SCREEN));
    uart_dma_send((uint8_t*)VT100_CURSOR_HOME, strlen(VT100_CURSOR_HOME));
    Menu_Display();
}

void Menu_Display(void) {
    uart_dma_send((uint8_t*)VT100_CURSOR_HOME, strlen(VT100_CURSOR_HOME));

    for (size_t i = 0; i < sizeof(intro_lines)/sizeof(intro_lines[0]); i++) {
        uart_dma_send((uint8_t*)intro_lines[i], strlen(intro_lines[i]));
        uart_dma_send((uint8_t*)"\r\n", 2);
    }

    uart_dma_send((uint8_t*)instructions, strlen(instructions));

    for (int i = 0; i < MENU_TOTAL_LINES; i++) {
        send_line(menu_lines[i], i == selected_index);
    }
}

void Menu_HandleInput(uint8_t input) {
    int old_index = selected_index;

    switch (esc_state) {
        case ESC_STATE_NONE:
            if (input == MENU_KEY_ESC) {
                esc_state = ESC_STATE_ESC;
            } else if (input == MENU_KEY_ENTER) {
                // TODO: handle Enter
            }
            break;

        case ESC_STATE_ESC:
            if (input == MENU_KEY_BRACKET) {
                esc_state = ESC_STATE_BRACKET;
            } else {
                esc_state = ESC_STATE_NONE;
            }
            break;

        case ESC_STATE_BRACKET:
            if (input == MENU_KEY_ARROW_UP && selected_index > 0) {
                selected_index--;
            } else if (input == MENU_KEY_ARROW_DOWN && selected_index < MENU_TOTAL_LINES - 1) {
                selected_index++;
            }

            if (old_index != selected_index) {
                Menu_UpdateLine(old_index, false);
                Menu_UpdateLine(selected_index, true);
            }

            esc_state = ESC_STATE_NONE;
            break;

        default:
            esc_state = ESC_STATE_NONE;
            break;
    }
}


void Menu_UpdateLine(int index, int is_selected) {
    // Move cursor to line (intro + instructions + index)
    int cursor_line = 4 + index;  // 4 lines before menu (3 intro + 1 instruction)

    char cursor_move[16];
    snprintf(cursor_move, sizeof(cursor_move), "\033[%d;1H", cursor_line);
    uart_dma_send((uint8_t*)cursor_move, strlen(cursor_move));

    send_line(menu_lines[index], is_selected);
}
