#include "uart_dma.h"
#include "menu.h"  // You call Menu_HandleInput(uint8_t) directly here
#include <string.h>

static UART_HandleTypeDef* uart;
static uint8_t dma_rx_buffer[UART_RX_BUFFER_SIZE];
static uint16_t last_read_pos = 0;

void uart_dma_init(UART_HandleTypeDef* huart_ref) {
    uart = huart_ref;

    // Start RX DMA in circular mode
    HAL_UART_Receive_DMA(uart, dma_rx_buffer, UART_RX_BUFFER_SIZE);

    // Enable UART IDLE interrupt
    __HAL_UART_ENABLE_IT(uart, UART_IT_IDLE);
}

void uart_dma_handle_idle(void) {
    // Get current DMA write position
    uint16_t dma_pos = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);

    if (dma_pos != last_read_pos) {
        if (dma_pos > last_read_pos) {
            // Linear region
            for (uint16_t i = last_read_pos; i < dma_pos; i++) {
                Menu_HandleInput(dma_rx_buffer[i]);
            }
        } else {
            // Wrapped region
            for (uint16_t i = last_read_pos; i < UART_RX_BUFFER_SIZE; i++) {
                Menu_HandleInput(dma_rx_buffer[i]);
            }
            for (uint16_t i = 0; i < dma_pos; i++) {
                Menu_HandleInput(dma_rx_buffer[i]);
            }
        }

        last_read_pos = dma_pos;
    }
}

void uart_dma_send(const uint8_t* data, uint16_t len) {
    HAL_UART_Transmit_DMA(uart, (uint8_t*)data, len);
}
