#include "uart_dma.h"
#include "stm32g4xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart2;

uint8_t dma_rx_buffer[UART_RX_BUFFER_SIZE];
static uint16_t last_read_pos = 0;

void uart_dma_init(void) {
    HAL_UART_Receive_DMA(uart, dma_rx_buffer, UART_RX_BUFFER_SIZE);
    __HAL_UART_ENABLE_IT(uart, UART_IT_IDLE);
}

void uart_dma_handle_idle(void) {
    __HAL_UART_CLEAR_IDLEFLAG(uart);
}

const uint8_t* uart_dma_get_new_bytes(uint16_t* count) {
    static uint8_t temp_buf[UART_RX_BUFFER_SIZE];
    uint16_t dma_pos = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
    uint16_t temp_count = 0;

    if (dma_pos != last_read_pos) {
        if (dma_pos > last_read_pos) {
            temp_count = dma_pos - last_read_pos;
            memcpy(temp_buf, &dma_rx_buffer[last_read_pos], temp_count);
        } else {
            temp_count = (UART_RX_BUFFER_SIZE - last_read_pos) + dma_pos;
            memcpy(temp_buf, &dma_rx_buffer[last_read_pos], UART_RX_BUFFER_SIZE - last_read_pos);
            memcpy(&temp_buf[UART_RX_BUFFER_SIZE - last_read_pos], dma_rx_buffer, dma_pos);
        }
        last_read_pos = dma_pos;
    }

    *count = temp_count;
    return temp_buf;
}
