#include "uart_dma.h"
#include "menu.h"

extern UART_HandleTypeDef huart2;

static uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
static volatile uint16_t last_pos = 0;

void uart_dma_send(uint8_t* data, uint16_t size) {
    while (huart2.gState != HAL_UART_STATE_READY);
    HAL_UART_Transmit_DMA(&huart2, data, size);
}

void uart_dma_init_rx(void) {
    HAL_UART_Receive_DMA(&huart2, rx_buffer, UART_RX_BUFFER_SIZE);
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);  // Enable idle detection
}

void uart_dma_process_idle(void) {
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);  // Disable during handling

    // 1. Determine current position
    uint16_t pos = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart2.hdmarx);

    // 2. Process all new bytes
    while (last_pos != pos) {
        uint8_t byte = rx_buffer[last_pos++];
        if (last_pos >= UART_RX_BUFFER_SIZE) last_pos = 0;
        Menu_HandleInput(byte);
    }

    // 3. Reset DMA to receive again (HAL doesn't do this automatically)
    __HAL_UART_CLEAR_IDLEFLAG(&huart2);
    __HAL_DMA_DISABLE(huart2.hdmarx);
    HAL_UART_Receive_DMA(&huart2, rx_buffer, UART_RX_BUFFER_SIZE);  // restart
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);  // Re-enable IDLE
}
